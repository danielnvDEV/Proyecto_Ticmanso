@using System.Net.Http.Json
@using TicmansoCrud.Shared
@using TicmansoWebAPI.Models
@using TicmansoWebAPI
@using MudBlazor
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Text;



@inject HttpClient httpClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@page "/management/controlUser/createUsers"
<PageTitle>Registrar usuario</PageTitle>


<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" @bind-Value="@userName" />
                <MudTextField T="string" Label="Surnames" Required="false" @bind-Value="@userSurnames" />
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" @bind-Value="@userEmail" />
                <MudTextField T="string" Label="Password" @ref="pwField1"
                              InputType="InputType.Password" Required="true"
                              RequiredError="Password is required!" @bind-Value="pwd"/>
                <MudText Required="true" RequiredError="Role is required!">
                    <MudSelect T="long" Label="Role" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" @bind-Value="userRole">
                        @foreach (var rol in role)
                        {
                            <MudSelectItem Value="@rol.Id">@rol.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudText>
                <MudText Required="true" RequiredError="Comnpany is required!">
                    <MudSelect T="long" Label="Company" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" @bind-Value="userCompany">
                        @foreach (var c in company)
                        {
                            <MudSelectItem Value="@c.Id">@c.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudText>

                <div class="d-flex align-center justify-space-between mt-4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary"  Class="ml-auto" OnClick="GeneratePass">Generate Password</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto" OnClick="Register">Register</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
            @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>
@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;
    string pwd;
    string userName;
    string userSurnames;
    string userEmail;
    long userRole;
    long userCompany;
    long Id;

    private void GeneratePass()
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_-+=[{]};:<>|./?";
        Random rnd = new Random((int)DateTime.Now.Ticks & 0x0000FFFF);
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 8; i++)
        {
            sb.Append(chars[rnd.Next(chars.Length)]);
        }
        pwd = sb.ToString(); 
        StateHasChanged();
    }
    private async Task Register()
    {
        if (form.IsValid) 
        {
            var userDto = new UserDTO()
                 {
                    Name = userName,
                    Surnames = userSurnames,
                    Mail = userEmail,
                    Password = pwd,
                    RoleId = userRole,
                    CompanyId = userCompany
           };

            try
            {
                var response = await httpClient.PostAsJsonAsync("https://localhost:7144/api/Ticmanso/users", userDto);

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("User registered successfully!", Severity.Success);

                    form.Reset();
                    pwd = string.Empty; 
                    
                }
                else
                {                   
                    string errorMessage = await response.Content.ReadAsStringAsync();                    
                    Snackbar.Add($"Registration failed: {errorMessage}", Severity.Error);
                }
            }
            catch (HttpRequestException ex)
            {              
                Snackbar.Add($"Error contacting the server: {ex.Message}", Severity.Error);
            }
        }
    }


    private string selectedRole;
    private string selectedCompany;

    private List<RoleDTO> role { get; set; } = new List<RoleDTO>();
    private List<CompanyDTO> company { get; set; } = new List<CompanyDTO>();

    protected override async Task OnInitializedAsync()
    {
        role = await httpClient.GetFromJsonAsync<List<RoleDTO>>("https://localhost:7144/api/Ticmanso/role");
        company = await httpClient.GetFromJsonAsync<List<CompanyDTO>>("https://localhost:7144/api/Ticmanso/company");
    }
}