@inherits LayoutComponentBase


@using Ticmanso.Pages
@using Blazored.SessionStorage
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Net.Http.Json
@using TicmansoCrud.Shared
@using TicmansoWebAPI.Models
@using TicmansoWebAPI
@using MudBlazor
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Text;
@using Blazored.SessionStorage
@using System.IdentityModel.Tokens.Jwt;
@using Newtonsoft.Json.Linq;
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization


<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<div class="page">
    <MudLayout class="p-0">
            <MudAppBar Elevation="1">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.InsertComment" Color="Color.Inherit" Href="/management/tickets/newTicket" />
            <MudIconButton ml-2 Icon="@Icons.Material.Filled.Home" Color="Color.Inherit" Href="/dashboard" />
            </MudAppBar>
            <MudDrawer @bind-Open="@open" Elevation="1">
                <MudDrawerHeader>
                    <MudText Typo="Typo.h6">Ticmanso</MudText>
                </MudDrawerHeader>
                <MudNavMenu>
                    <MudNavLink Href="/chat">Chats</MudNavLink>
                    <MudNavLink Href="/tickets">Tickets</MudNavLink>
                    <MudNavLink Href="/dashboard">Dashboard</MudNavLink>
                    <MudNavGroup Title="Management" Expanded="true">
                        <MudNavLink Href="/management/controlUser">Users</MudNavLink>
                        <MudNavLink Href="/management/roles">Role</MudNavLink>
                        <MudNavLink Href="/management/stutuses">Statuses</MudNavLink>
                        <MudNavLink Href="/management/priorities">Priorities</MudNavLink>
                        <MudNavLink Href="/management/companies">Companies</MudNavLink>
                    </MudNavGroup>
                    <MudNavLink Href="/Settings">Settings</MudNavLink>
                    <MudNavLink OnClick="LogoutAsync">LogOut</MudNavLink>
                </MudNavMenu>
            </MudDrawer>
            <MudMainContent Class="d-flex">
                <MudContainer Class="mud-container-maxwidth-xl mud-container mt-2">
                   @Body
                </MudContainer> 
            </MudMainContent>
    </MudLayout>
</div>

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ISessionStorageService SessionStorage
@inject ISnackbar Snackbar


@code
{
    bool open = false;
    private long CurrentUserId { get; set; }
    void ToggleDrawer()
    {
        open = !open;
    }

    public async Task LogoutAsync()
    {
        if (await SessionStorage.ContainKeyAsync("token"))
        {
            await SessionStorage.RemoveItemAsync("token");
            await SessionStorage.ClearAsync();
            NavigationManager.NavigateTo("/login");
        }
    }

    private HubConnection hubConnection;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/signalRHub")).Build();
        //await hubConnection.StartAsync();
        hubConnection.On<string, long, long>("ReceiveChatNotification", (message, receiverUserId, senderUserId) =>
        {
            if (CurrentUserId == receiverUserId)
            {
                JSRuntime.InvokeAsync<string>("PlayAudio", "notification");
                Snackbar.Add(message, Severity.Info, config =>
                                {
                        config.VisibleStateDuration = 10000;
                        config.HideTransitionDuration = 500;
                        config.ShowTransitionDuration = 500;
                        config.Action = "Chat?";
                        config.ActionColor = Color.Info;
                        config.Onclick = snackbar =>
                    {
                        NavigationManager.NavigateTo($"chat/{senderUserId}");
                        return Task.CompletedTask;
                    };
                    });
            }
        });


            var tokenString  = await SessionStorage.GetItemAsync<string>("token");
            if (!string.IsNullOrEmpty(tokenString))
            {
                try
                {
                    var tokenObject = JObject.Parse(tokenString);
                    var token = tokenObject["token"].ToString();
                    var jwtToken = DecodeJwtToken(token);

                    CurrentUserId = long.Parse(jwtToken.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);
                    var userName = jwtToken.Claims.First(c => c.Type == ClaimTypes.Name).Value;
                    var userSurnames = jwtToken.Claims.First(c => c.Type == ClaimTypes.Surname).Value;
                    var userEmail = jwtToken.Claims.First(c => c.Type == ClaimTypes.Email).Value;
                    var userCompanyId = jwtToken.Claims.First(c => c.Type == ClaimTypes.UserData).Value;
                    var userRoleId = jwtToken.Claims.First(c => c.Type == ClaimTypes.Role).Value;

                }
                catch (ArgumentException ex)
                {
                    // Handle the token parsing error
                    Console.WriteLine($"Error parsing JWT token: {ex.Message}");
                    // You can choose to log the error, display an error message, or take appropriate action
                }
            }
    }
             public JwtSecurityToken DecodeJwtToken(string token)
            {
                var tokenHandler = new JwtSecurityTokenHandler();
                var jwtToken = tokenHandler.ReadJwtToken(token);
                return jwtToken;
            }
    
}