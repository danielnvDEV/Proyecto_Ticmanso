@inherits LayoutComponentBase

@using Microsoft.AspNetCore.Identity
@using TicmansoV2.Pages
@using MudBlazor
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Text;
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization;
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt;
@using TicmansoV2.Authentication
@using TicmansoV2.Shared.Contracts

@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager
@inject HttpClient httpClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime


<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<AuthorizeView Roles="Admin">
    <Authorized >
        <div class="page">
            <MudLayout class="p-0">
                    <MudAppBar Elevation="1">
                        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
                        <MudSpacer />
                        <MudIconButton Icon="@Icons.Material.Filled.InsertComment" Color="Color.Inherit" Href="/management/tickets/newTicket" />
                        <MudIconButton ml-2 Icon="@Icons.Material.Filled.Home" Color="Color.Inherit" Href="/dashboard" />
                        @if (imageBytes != null)
                        {
                            <MudAvatar Image="@($"data:image/jpeg;base64,{Convert.ToBase64String(imageBytes)}")" Style="height:19px; width:19px;">
                            </MudAvatar>
                        }
                        else
                        {
                            <MudAvatar Image="@selectedImage" Height="19" />
                        }
                    </MudAppBar>
                    <MudDrawer @bind-Open="@open" Elevation="1">
                        <MudDrawerHeader>
                            <MudText Typo="Typo.h6">Ticmanso</MudText>
                        </MudDrawerHeader>
                        <MudNavMenu>
                            <MudNavLink Href="/teams-chat">Chats</MudNavLink>
                            <MudNavGroup Title="Fichaje" Expanded="true">
                                <MudNavLink Href="/attendance">Mi jornadas</MudNavLink>
                                <MudNavLink Href="/control/attendance">Consultar jornadas</MudNavLink>
                            </MudNavGroup>
                            <MudNavLink Href="/tickets">Tickets</MudNavLink>
                            <MudNavLink Href="/dashboard">Panel de control</MudNavLink>
                            <MudNavGroup Title="Configuración" Expanded="true">
                                <MudNavLink Href="/management/controlUser">Usuarios</MudNavLink>
                                <MudNavLink Href="/management/statuses">Estados</MudNavLink>
                                <MudNavLink Href="/management/priorities">Prioridades</MudNavLink>
                                <MudNavLink Href="/management/companies">Compañias</MudNavLink>
                            </MudNavGroup>
                            <MudNavLink Href="/settings">Ajustes</MudNavLink>
                            <MudNavLink OnClick="Logout">LogOut</MudNavLink>
                        </MudNavMenu>
                    </MudDrawer>
                    <MudMainContent Class="d-flex">
                        <MudContainer Class="mud-container-maxwidth-xl mud-container mt-2">
                           @Body
                        </MudContainer> 
                    </MudMainContent>
            </MudLayout>
        </div>
    </Authorized>
</AuthorizeView>
<AuthorizeView Roles="User">
    <Authorized>
        <div class="page">
            <MudLayout class="p-0">
                <MudAppBar Elevation="1">
                    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Filled.InsertComment" Color="Color.Inherit" Href="/management/tickets/newTicket" />
                    <MudIconButton ml-2 Icon="@Icons.Material.Filled.Home" Color="Color.Inherit" Href="/dashboard" />
                </MudAppBar>
                <MudDrawer @bind-Open="@open" Elevation="1">
                    <MudDrawerHeader>
                        <MudText Typo="Typo.h6">Ticmanso</MudText>
                    </MudDrawerHeader>
                    <MudNavMenu>
                        <MudNavLink Href="/teams-chat">Chats</MudNavLink>
                        <MudNavLink Href="/attendance">Fichaje</MudNavLink>
                        <MudNavLink Href="/myTickets">Tickets</MudNavLink>
                        <MudNavLink Href="/dashboard">Panel de control</MudNavLink>                       
                        <MudNavLink Href="/Settings">Ajustes</MudNavLink>
                        <MudNavLink OnClick="Logout">LogOut</MudNavLink>
                    </MudNavMenu>
                </MudDrawer>
                <MudMainContent Class="d-flex">
                    <MudContainer Class="mud-container-maxwidth-xl mud-container mt-2">
                        @Body
                    </MudContainer>
                </MudMainContent>
            </MudLayout>
        </div>
    </Authorized>
</AuthorizeView>
@code
{
    private string selectedImage;
    bool open = false;

    [CascadingParameter] string userId { get; set; } = "";

    void ToggleDrawer()
    {
        open = !open;
    }
    void Login()
    {
        NavManager.NavigateTo("/");
    }

    private async Task Logout()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null!);
        NavManager.NavigateTo("/");
    }
    private byte[] imageBytes;

    private async Task<byte[]> LoadUserImage(string userId)
    {
        var response = await HttpClient.GetAsync($"api/UserImage/GetUserImage/{userId}");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadAsByteArrayAsync();
        }
        return null;
    }

    protected override async Task OnInitializedAsync()
    {

        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        var claims = jwtToken.Claims;
        try
        {
            userId = claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        }
        catch (HttpIOException e)
        {
            Snackbar.Add("No se ha podido cargar la informacion correctamente", Severity.Error);
        }
       await LoadUserImage(userId);
    }
}
