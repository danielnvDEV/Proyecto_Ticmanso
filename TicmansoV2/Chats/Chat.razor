@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http.Json
@using TicmansoV2.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt
@using TicmansoV2.Services

@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject ChatClient ChatClient

<div>
    <MudTextField @bind-Value="messageInput" Label="Mensaje" Variant="Variant.Outlined"></MudTextField>
    <MudButton OnClick="SendMessage" Variant="Variant.Filled" Color="Color.Primary">Enviar</MudButton>
</div>

<MudList>
    @foreach (var message in messages)
    {
        <MudListItem>
            <MudText>@message.SenderId: @message.Content</MudText>
            <MudText Typo="Typo.caption" Align="Align.End">@message.Timestamp</MudText>
        </MudListItem>
    }
</MudList>

@code {
    private List<ChatMessageDTO> messages = new List<ChatMessageDTO>();
    private string messageInput;
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        var claims = jwtToken.Claims;
        userId = claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        ChatClient.ReceiveMessage(ReceiveMessage);
        await ChatClient.ConnectAsync();
    }

    private void ReceiveMessage(ChatMessageDTO message)
    {
        messages.Add(message);
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(messageInput))
        {
            var message = new ChatMessageDTO
            {
                Content = messageInput,
                Timestamp = DateTime.Now,
                SenderId = userId,
                ReceiverId = "UsuarioDestinatarioId"
            };

            await ChatClient.SendMessageAsync(message);
            messageInput = string.Empty;
        }
    }

    public async ValueTask DisposeAsync()
    {
        await ChatClient.DisconnectAsync();
    }
}