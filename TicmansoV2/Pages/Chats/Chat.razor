@page "/teams-chat"
@using System.Net.Http.Json
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using TicmansoV2.Shared
@using MudBlazor
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
<AuthorizeView>
    <Authorized Context="authContext">
        <MudGrid Style="Background-color: #F0F3FA">
            <MudItem xs="12" sm="3" >
                <MudPaper Elevation="0" Style="Background-color:#F0F3FA; border-right:1px solid;border-color:#D5DEEF ;">
                        <MudList Clickable="true">
                            <MudListItem Icon="@Icons.Material.Filled.Person" Text="Usuarios" InitiallyExpanded="true">
                                <NestedList>
                                    @foreach (var user in Users)
                                    {
                                    if (user.Id != conectedUser && !user.Email.Contains("UsuarioEliminado"))
                                        {
                                            <MudListItem OnClick="@(() => SelectUser(user))">
                                                @{
                                                    var userImage = userImages.FirstOrDefault(ui => ui.IdUser == user.Id);
                                                    if (userImage != null)
                                                    {
                                                        var imageUrl = $"data:image/jpeg;base64,{userImage.Image}";
                                                        <MudAvatar Image="@imageUrl" Alt="@user.UserName" Width="40" Height="40" Class="rounded-circle" />
                                                    }
                                                    else
                                                    {
                                                        <MudAvatar Style="background-color:#395886;color:aliceblue">@user.UserName.Substring(0, 1)</MudAvatar>
                                                    }
                                                }
                                                @user.UserName
                                            </MudListItem>
                                        }
                                    }
                                </NestedList>
                            </MudListItem>
                            <MudListItem Icon="@Icons.Material.Filled.Groups2" Text="Grupos" InitiallyExpanded="true">
                                <NestedList>
                                    @foreach (var group in Groups)
                                    {
                                        <MudListItem OnClick="@(() => SelectGroup(group))">
                                            <MudAvatar Style="background-color:#395886;color:aliceblue">@group.Name.Substring(0, 1)</MudAvatar>
                                            @group.Name
                                        </MudListItem>
                                    }
                                <MudListItem>
                                    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="OpenCreateGroupDialog" />
                                    Crear nuevo grupo
                                </MudListItem>
                                </NestedList>
                            </MudListItem>
                            <MudListItem Icon="@Icons.Material.Filled.PersonOff" Text="Usuarios eliminados" InitiallyExpanded="true">
                                <NestedList>
                                    @foreach (var user in Users)
                                    {
                                        if (user.Id != conectedUser && user.Email.Contains("UsuarioEliminado"))
                                        {
                                            <MudListItem OnClick="@(() => SelectUser(user))">
                                                @{
                                                    var userImage = userImages.FirstOrDefault(ui => ui.IdUser == user.Id);
                                                    if (userImage != null)
                                                    {
                                                        var imageUrl = $"data:image/jpeg;base64,{userImage.Image}";
                                                        <MudAvatar Image="@imageUrl" Alt="@user.UserName" Width="40" Height="40" Class="rounded-circle" />
                                                    }
                                                    else
                                                    {
                                                        <MudAvatar Style="background-color:#395886;color:aliceblue">@user.UserName.Substring(0, 1)</MudAvatar>
                                                    }
                                                }
                                                @user.UserName
                                            </MudListItem>
                                        }
                                    }
                                </NestedList>
                            </MudListItem>
                        </MudList>
                    </MudPaper>
               </MudItem>            

            <MudItem xs="12" sm="9" Style="Background-color:#F0F3FA">
                <MudPaper Elevation="0" Style="Background-color:#F0F3FA">
                    <MudToolBar>
                        @if (SelectedGroup != null)
                        {
                            <MudText Typo="Typo.h6">Conversación con @SelectedGroup.Name</MudText>
                        }
                        else if (SelectedUser != null)
                        {
                            <MudText Typo="Typo.h6">Conversación con @SelectedUser.Name</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.h6">Conversación</MudText>
                        }
                    </MudToolBar>
                    <MudList id="messages-container" Style="height: 75vh; overflow-y: scroll;">
                        @foreach (var message in ChatMessages)
                        {
                            <div  class="@(message.SenderId == conectedUser ? "sent-message" : "received-message")">
                            <MudCard Style="margin-bottom:1vh; border: none; box-shadow: none;height: auto;">
                                    <MudText>@message.Content</MudText>
                                    <MudText Typo="Typo.caption" Style="color: black; font-size: 1vh;">@message.Timestamp</MudText>
                                </MudCard>
                            </div>
                        }
                    </MudList>
                    <MudPaper Elevation="0" Class="d-flex mt-4 align-items-start justify-center" Style="Background-color:#F0F3FA">
                        <MudTextField @bind-Value="NewMessage" Placeholder="Escribe un mensaje..." Variant="Variant.Outlined" Class="flex-grow-1" Style="border-radius: 20px;"></MudTextField>
                        <MudIconButton Icon="@Icons.Material.Filled.Send" Variant="Variant.Filled" Color="Color.Primary" OnClick="SendMessage" Class="ml-2 mt-3" Style="border-radius: 50%; width: 40px; height: 40px; min-width: unset;"></MudIconButton>
                    </MudPaper>
                </MudPaper>
            </MudItem>
        </MudGrid>
</Authorized>
</AuthorizeView>
<style>
    .sent-message {
        display: flex;
        justify-content: flex-end;
    }

        .sent-message .mud-card {
            background-color: #628ECB;
            color:white;
            border-radius: 13px 0 13px 13px;
            max-width: 70%;
            margin-right:2vh;
            padding:0.5vh;
            overflow-y: auto;
            word-wrap: break-word;
        }

    .received-message {
        display: flex;
        justify-content: flex-start;
    }

        .received-message .mud-card {
            background-color: #B1C9EF;
            border-radius: 0 13px 13px 13px;
            max-width: 70%;
            margin-left: 2vh;
            padding: 0.5vh;
            overflow-y: auto;
            word-wrap: break-word;
        }

    #messages-container {
        scroll-behavior: smooth;
    }   
</style>
<script>
    function scrollToBottom(elementId) {
        var element = document.getElementById(elementId);
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    }
</script>
@code {
    private List<ApplicationUserDTO>? Users { get; set; } = new List<ApplicationUserDTO>();
    private ApplicationUserDTO? SelectedUser { get; set; }
    private List<ChatMessageDTO>? ChatMessages { get; set; } = new List<ChatMessageDTO>();
    private string? NewMessage { get; set; }
    private string? conectedUser { get; set; }
    private List<GroupDTO> Groups { get; set; } = new List<GroupDTO>();
    private List<UserImageDTO> userImages { get; set; } = new List<UserImageDTO>();
    private GroupDTO SelectedGroup { get; set; }
    private byte[] imageBytes;
    private string image;
    bool open = true;

    protected override async Task OnInitializedAsync()
    {
        SelectedUser = new ApplicationUserDTO();
        SelectedGroup = new GroupDTO();

        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        var claims = jwtToken.Claims;
        conectedUser = claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        var userImages = new List<UserImageDTO>();
        try
        {
            Users = await httpClient.GetFromJsonAsync<List<ApplicationUserDTO>>("api/Users");
            SelectedUser = Users.FirstOrDefault();
            Groups = await httpClient.GetFromJsonAsync<List<GroupDTO>>($"api/Group/user/{conectedUser}");
            userImages = await httpClient.GetFromJsonAsync<List<UserImageDTO>>($"api/UserImage/GetAllUserImages");
        }
        catch (Exception)
        {
            Snackbar.Add("Error en la carga inicial de la informacion");
        }

    }

    protected void OnAfterRenderAsync()
    {
        JSRuntime.InvokeVoidAsync("scrollToBottom", "messages-container");
    }
    private async Task LoadUserChatMessages()
    {

        try
        {
            ChatMessages = await httpClient.GetFromJsonAsync<List<ChatMessageDTO>>($"api/ChatMessages/user/{SelectedUser.Id}");
            OnAfterRenderAsync();
            StateHasChanged();
        }
        catch (Exception)
        {
            Snackbar.Add($"Error al cargar los datos", Severity.Error);
        }

    }
    private async Task LoadGroupChatMessages()
    {
        try
        {
            ChatMessages = await httpClient.GetFromJsonAsync<List<ChatMessageDTO>>($"api/ChatMessages/group/{SelectedGroup.Id}");
            OnAfterRenderAsync();
            StateHasChanged();
        }
        catch (Exception)
        {
            Snackbar.Add($"Error al cargar los datos", Severity.Error);
        }

    }

    private async Task SelectUser(ApplicationUserDTO user)
    {
        SelectedUser = user;
        SelectedGroup = null;
        await LoadUserChatMessages();
        OnAfterRenderAsync();
        StateHasChanged();
    }

    private async Task SelectGroup(GroupDTO group)
    {
        SelectedGroup = group;
        SelectedUser = null;
        await LoadGroupChatMessages();
        OnAfterRenderAsync();
        StateHasChanged();
    }

    private async void LoadGroups()
    {
        try
        {
            Groups = await httpClient.GetFromJsonAsync<List<GroupDTO>>($"api/Groups/user/{conectedUser}");
        }
        catch (Exception)
        {

            Snackbar.Add("Error al cargar la lista de grupos");
        }

    }
    private string GetUserName(string userId)
    {
        return Users.FirstOrDefault(u => u.Id == userId)?.Email ?? "Unknown";
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(NewMessage))
        {
            ChatMessageDTO message;

            if (SelectedGroup != null)
            {                
                message = new ChatMessageDTO
                {
                    Content = NewMessage,
                    Timestamp = DateTime.Now,
                    SenderId = conectedUser,
                    GroupId = SelectedGroup.Id
                };
            }
            else
            {               
                message = new ChatMessageDTO
                {
                    Content = NewMessage,
                    Timestamp = DateTime.Now,
                    SenderId = conectedUser,
                    ReceiverId = SelectedUser.Id
                };
            }
            try 
            { 
                var response = await httpClient.PostAsJsonAsync($"api/ChatMessages", message); 

            }
            catch (Exception e)
            {
                Console.Write("el mensaje se ha guardado correctamente aunque haya sido bloqueado por el CORS");
            }


            NewMessage = string.Empty;

            if (SelectedGroup != null)
            {
                await LoadGroupChatMessages();
            }
            else
            {
                await LoadUserChatMessages();
            }
        }
    }
    private async Task OpenCreateGroupDialog()
    {
        var dialog = DialogService.Show<CreateGroupDialog>("Crear nuevo grupo");
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var newGroup = (GroupDTO)result.Data;
            Groups.Add(newGroup);
            LoadGroups();
        }
    }

    private async Task<byte[]> LoadUserImage(string userId)
    {
        try
        {
            var response = await HttpClient.GetAsync($"api/UserImage/GetUserImage/{userId}");
            if (response.IsSuccessStatusCode)
            {
                imageBytes = await response.Content.ReadAsByteArrayAsync();
                return imageBytes;
            }
        }
        catch (Exception)
        {
            Snackbar.Add($"Error al cargar los datos", Severity.Error);
        }

        return null;
    }
}