@page "/teams-chat"
@using System.Net.Http.Json
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt;
@using TicmansoV2.Shared
@using MudBlazor
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
<MudGrid>
    <MudItem xs="4">
        <MudPaper Elevation="0">
            <MudList Clickable="true">
                <MudListSubheader>Usuarios</MudListSubheader>
                @foreach (var user in Users)
                {
                    <MudListItem OnClick="@(() => SelectUser(user))">
                        <MudAvatar Color="Color.Primary">@user.UserName.Substring(0, 1)</MudAvatar>
                        <MudText Typo="Typo.body1" Class="ml-3">@user.UserName</MudText>
                    </MudListItem>
                }
            </MudList>
            <MudList Clickable="true">
                <MudListSubheader>Grupos</MudListSubheader>
                @foreach (var group in Groups)
                {
                    <MudListItem OnClick="@(() => SelectGroup(group))">
                        <MudAvatar Color="Color.Primary">@group.Name.Substring(0, 1)</MudAvatar>
                        <MudText Typo="Typo.body1" Class="ml-3">@group.Name</MudText>
                    </MudListItem>
                }
                <MudListItem>
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="OpenCreateGroupDialog" />
                    <MudText Typo="Typo.body1" Class="ml-3">Crear nuevo grupo</MudText>
                </MudListItem>
            </MudList>  
        </MudPaper>
    </MudItem>
    <MudItem xs="8">
        <MudPaper Elevation="0">
            <MudToolBar>
                <MudText Typo="Typo.h6">Conversación con @SelectedUser.Name</MudText>
            </MudToolBar>
            <MudList Style="height: 500px; overflow-y: scroll;">
                @foreach (var message in ChatMessages)
                {
                    <MudListItem>
                        <MudCard Outlined="true" Class="@(message.SenderId == conectedUser ? "ml-auto" : "mr-auto")">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.body1"><strong>@GetUserName(message.SenderId)</strong></MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.body1">@message.Content</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudListItem>
                }
            </MudList>
            <MudPaper Elevation="0" Class="d-flex mt-4">
                <MudTextField @bind-Value="NewMessage" Placeholder="Escribe un mensaje..." Variant="Variant.Outlined" Class="flex-grow-1"></MudTextField>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SendMessage" Class="ml-2">Enviar</MudButton>
            </MudPaper>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private List<ApplicationUserDTO>? Users { get; set; } = new List<ApplicationUserDTO>();
    private ApplicationUserDTO? SelectedUser { get; set; }
    private List<ChatMessageDTO>? ChatMessages { get; set; } = new List<ChatMessageDTO>();
    private string? NewMessage { get; set; }
    private string? conectedUser { get; set; }
    private List<GroupDTO> Groups { get; set; } = new List<GroupDTO>();
    private GroupDTO SelectedGroup { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        var claims = jwtToken.Claims;
        conectedUser = claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        Users = await httpClient.GetFromJsonAsync<List<ApplicationUserDTO>>("api/Users");
        SelectedUser = Users.FirstOrDefault();
        Groups = await httpClient.GetFromJsonAsync<List<GroupDTO>>($"api/Group/user/{conectedUser}");
        SelectedGroup = Groups.FirstOrDefault();
        await LoadUserChatMessages();
        await LoadGroupChatMessages();
    }

    private async Task LoadUserChatMessages()
    {
        ChatMessages = await httpClient.GetFromJsonAsync<List<ChatMessageDTO>>($"api/ChatMessages/user/{SelectedUser.Id}");
    }
    private async Task LoadGroupChatMessages()
    {
        ChatMessages = await httpClient.GetFromJsonAsync<List<ChatMessageDTO>>($"api/ChatMessages/group/{SelectedGroup.Id}");
    }
    private async void SelectUser(ApplicationUserDTO user)
    {
        SelectedUser = user;
        await LoadUserChatMessages();
    }

    private async void SelectGroup(GroupDTO group)
    {
        SelectedGroup = group;
       await LoadGroupChatMessages();
    }

    private async void LoadGroups()
    {
        Groups = await httpClient.GetFromJsonAsync<List<GroupDTO>>($"api/Groups/user/{conectedUser}");
    }
    private string GetUserName(string userId)
    {
        return Users.FirstOrDefault(u => u.Id == userId)?.Email ?? "Unknown";
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(NewMessage))
        {
            ChatMessageDTO message;

            if (SelectedGroup != null)
            {                
                message = new ChatMessageDTO
                {
                    Content = NewMessage,
                    Timestamp = DateTime.Now,
                    SenderId = conectedUser,
                    GroupId = SelectedGroup.Id
                };
            }
            else
            {               
                message = new ChatMessageDTO
                {
                    Content = NewMessage,
                    Timestamp = DateTime.Now,
                    SenderId = conectedUser,
                    ReceiverId = SelectedUser.Id
                };
            }

            var response = await httpClient.PostAsJsonAsync($"api/ChatMessages", message);

            NewMessage = string.Empty;

            if (SelectedGroup != null)
            {
                await LoadGroupChatMessages();
            }
            else
            {
                await LoadUserChatMessages();
            }
        }
    }
    private async Task OpenCreateGroupDialog()
    {
        var dialog = DialogService.Show<CreateGroupDialog>("Crear nuevo grupo");
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var newGroup = (GroupDTO)result.Data;
            Groups.Add(newGroup);
             LoadGroups();
        }
    }

}