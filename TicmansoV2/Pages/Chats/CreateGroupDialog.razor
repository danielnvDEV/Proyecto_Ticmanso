@using System.Net.Http.Json
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt;
@using TicmansoV2.Shared
@using MudBlazor
@inject ISnackbar Snackbar
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
<MudDialogProvider/>
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Crear nuevo grupo</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField Required @bind-Value="GroupName" Label="Nombre del grupo" />
        <MudTextField Required @bind-Value="GroupDescription" Label="Descripcion del grupo" />
        <MudSelect T="string" MultiSelection="true" SelectedValues="SelectedUserIds" SelectedValuesChanged="OnSelectedValuesChanged" Label="Usuarios">
            @foreach (var user in Users)
            {
                <MudSelectItem Value="@user.Id">@user.Name</MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary" OnClick="CreateGroup">Crear</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public List<ApplicationUserDTO> Users { get; set; }

    private string GroupName { get; set; }
    private string GroupDescription { get; set; }

    
    private IEnumerable<ApplicationUserDTO> SelectedUsers { get; set; } = new List<ApplicationUserDTO>();
    private List<string> SelectedUserIds { get; set; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        Users = await httpClient.GetFromJsonAsync<List<ApplicationUserDTO>>("https://localhost:7291/api/Users");
    }
    private void Cancel()
    {
        MudDialog.Cancel();
    }
    private void OnSelectedValuesChanged(IEnumerable<string> values)
    {
        SelectedUserIds = new List<string>(values);
    }
    private async Task CreateGroup()
    {
        SelectedUsers = Users.Where(u => SelectedUserIds.Contains(u.Id)).ToList();

        var newGroup = new GroupDTO
        {
            Name = GroupName,
            Description = GroupDescription,
            CreatedAt = DateTime.Now,
            UserGroups = SelectedUsers.Select(u => new UserGroupDTO { UserId = u.Id }).ToList()
        };

        var response = await httpClient.PostAsJsonAsync("https://localhost:7291/api/Group", newGroup);

        if (response.IsSuccessStatusCode)
        {
            MudDialog.Close(DialogResult.Ok(newGroup));
        }
        else
        {           
            Snackbar.Add($"Error al crear el grupo", Severity.Error);
        }
    }
}
