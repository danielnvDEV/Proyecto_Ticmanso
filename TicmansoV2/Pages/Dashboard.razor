@page "/dashboard"

@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Data;
@using Microsoft.Data.SqlClient;
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt;
@using System.Net.Http;
@using System.Threading.Tasks;
@using Newtonsoft.Json.Linq;
@using TicmansoV2.Shared
@using TicmansoV2.Shared.Views
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject HttpClient httpClient

@attribute [Authorize]

<PageTitle>Dashboard</PageTitle>

<AuthorizeView Roles="User">
    <Authorized >
        <h1 class="d-flex justify-content-center mt-10">Bienvenido @context.User.Identity.Name!</h1>
        <MudContainer class="DshBrdContainer d-flex justify-content-center">
            <MudButton xs="12" sm="6" Class="pa-4" href="/myTickets"
                       Style="box-shadow: 0 4px 6px rgba(100, 147, 181, 1), 0 1px 2px rgba(100, 147, 181, 0.5);background:white;">
                <MudIcon Icon="@Icons.Material.Filled.ListAlt" Class="mr-3" />
                Ver todos los tickets
            </MudButton>

            <div class="DashBoardSpacer"></div>

            <MudButton xs="12" sm="6" Class="pa-4" href="/management/tickets/newTicket"
                       Style="box-shadow: 0 4px 6px rgba(100, 147, 181, 1), 0 1px 2px rgba(100, 147, 181, 0.5);background:white;">
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" />
                Enviar un ticket
            </MudButton>
        </MudContainer>
    </Authorized>
</AuthorizeView>
<AuthorizeView Roles="Admin">
    <Authorized Context="authContext">
        <MudGrid  xs="12" sm="12">
            <MudItem xs="12" Class="d-flex align-content-start flex-wrap flex-grow-1 gap-4 justify-center mt-5">
                @foreach (var status in statuses)
                {
                    <MudItem Style="background-color:white; margin:1vh; padding:2vh" Class="d-flex justify-center align-center cmptCentrado">
                        <MudText Align="Align.Center">@status.Name : @status.TicketCount</MudText> 
                    </MudItem>
                }
            </MudItem>
        </MudGrid>
        <MudGrid xs="12" sm="12">
            <MudItem xs="12" sm="7">
                <MudText Class="d-flex mt-5"><b>Tickets recientes</b></MudText>
                <MudTable Items="@Tickets" T="GeneralViewTicketDTO" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading"
                          LoadingProgressColor="Color.Info" Class="cmptCentrado" @bind-SelectedItem="selectedItem1" OnRowClick="@OnRowClick">

                    <HeaderContent>
                        <MudTh>Número de Ticket</MudTh>
                        <MudTh>Título</MudTh>
                        <MudTh>Descripción</MudTh>
                        <MudTh>Usuario de Creación</MudTh>
                        <MudTh>Usuario de Soporte</MudTh>
                        <MudTh>Estado</MudTh>
                        <MudTh>Prioridad</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Número de Ticket">@context.NumTicket</MudTd>
                        <MudTd DataLabel="Título">
                            @if (context.Tittle.Length > 20)
                            {
                                @($"{context.Tittle.Substring(0, 20)}...")
                            }
                            else
                            {
                                @context.Tittle
                            }
                        </MudTd>
                        <MudTd DataLabel="Descripción">
                            @if (context.Description.Length > 20)
                            {
                                @($"{context.Description.Substring(0, 20)}...")
                            }
                            else
                            {
                                @context.Description
                            }
                        </MudTd>
                        <MudTd DataLabel="Usuario de Creación">@context.CreationUser</MudTd>
                        <MudTd DataLabel="Usuario de Soporte">@context.SuportUser</MudTd>
                        <MudTd DataLabel="Estado">@context.Status</MudTd>
                        <MudTd DataLabel="Prioridad">@context.Priority</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudItem>
            <MudItem xs="12" sm="5">
                <MudText Class="d-flex mt-5"><b>Accesos directos</b></MudText>
                <MudCard Class="cmptCentrado">
                    <MudLink Href="/teams-chat" Style="color:black; text-decoration:none;">
                        <MudCardContent>
                            <MudIcon Icon="@Icons.Material.Filled.Drafts" Color="Color.Dark"></MudIcon>&nbsp  Chats
                        </MudCardContent>                        
                    </MudLink>
                    <MudLink Href="/attendance" Style="color:black; text-decoration:none;">
                        <MudCardContent>
                            <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Color="Color.Dark"></MudIcon>&nbsp  Mi jornada
                        </MudCardContent>
                    </MudLink>
                    <MudLink Href="/tickets" Style="color:black; text-decoration:none;">
                        <MudCardContent class="d-flex justify-start">
                            <img src="/images/ticket.png" width="22" height="22" />&nbsp Tickets
                        </MudCardContent>
                    </MudLink>
                    <MudLink Href="/settings" Style="color:black; text-decoration:none;">
                        <MudCardContent>
                            <MudIcon Icon="@Icons.Material.Filled.Build" Color="Color.Dark"></MudIcon>&nbsp  Ajustes
                        </MudCardContent>
                    </MudLink>
                </MudCard>               
            </MudItem>
        </MudGrid>
    </Authorized>
</AuthorizeView>

@code {
    string userId = ""; 
    private bool _loading = true;
    private List<GeneralViewTicketDTO> Tickets = new List<GeneralViewTicketDTO>();
    private List<StatusCountDTO> statuses = new List<StatusCountDTO>();
    private GeneralViewTicketDTO selectedItem1 = null;

    protected override async Task OnInitializedAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        var claims = jwtToken.Claims;
        userId = claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        try
        {
            statuses = await httpClient.GetFromJsonAsync<List<StatusCountDTO>>($"api/Status/Count/User/{userId}");
            Tickets = await httpClient.GetFromJsonAsync<List<GeneralViewTicketDTO>>("api/GeneralTikets/GetLast5");
            _loading = false;
        }
        catch(Exception e)
        {
            Snackbar.Add("Problemas en la carga de datos inicial", Severity.Error);
            Console.WriteLine(e);
        }                
    }

    [Parameter]
    public EventCallback<int> OnTicketSelected { get; set; }

    private void ShowTicketDetails(int ticketId)
    {
        OnTicketSelected.InvokeAsync(ticketId);
    }

    private long selectedTicketId;

    private void OnRowClick(TableRowClickEventArgs<GeneralViewTicketDTO> args)
    {
        var clickedTicket = args.Item;
        HandleTicketSelected(clickedTicket.NumTicket);
    }

    private void HandleTicketSelected(int ticketId)
    {
        selectedTicketId = ticketId;
        NavManager.NavigateTo($"/tickets/ticket/{ticketId}");
    }
}
