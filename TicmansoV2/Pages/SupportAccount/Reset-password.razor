@using Microsoft.AspNetCore.Components.Authorization
@using TicmansoV2.Authentication
@using TicmansoV2.Shared.Contracts
@using MudBlazor
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt


@page "/api/Account/reset-password"
@layout LoginLayout
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@inject NavigationManager NavManager

<PageTitle>Cambiar contraseña</PageTitle>
<MudGrid Justify="Justify.Center" AlignContent="AlignContent.Center" Class="loginGrid d-flex">
    <MudItem xs="12" sm="6">
        <MudCard>
            <MudCardContent>
                <MudForm Model="@model" @ref="@form"  ValidationDelay="0">           

                    <MudTextField T="string" Label="Nueva Contraseña" HelperText="Elige una contraseña segura" Required="true"
                                  RequiredError="Nueva Contraseña es requerida!" InputType="InputType.Password"
                                  @bind-Value="model.NewPassword" For="@(() => model.NewPassword)" />

                    <MudTextField T="string" Label="Confirmar Nueva Contraseña" HelperText="Repite la contraseña" Required="true"
                                  RequiredError="Confirmar Nueva Contraseña es requerida!" InputType="InputType.Password"
                                  @bind-Value="ConfirmPassword" For="@(() => ConfirmPassword)" />
                </MudForm>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@ResetPassword">Restablecer Contraseña</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>
@code {
    ResetPasswordDTO model = new ResetPasswordDTO();
    MudForm form;
    string ConfirmPassword;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Email { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Token { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/dashboard");
        }
        else
        {
            model.Email = Email;
            model.Token = Token;
        }
    }

    private async Task ResetPassword()
    {
        await form.Validate();

        if (form.IsValid)
        {
            if (Email != null || Token != null)
            {
                Email = model.Email;
                Token = model.Token;
                var result = await HttpClient.PostAsJsonAsync("api/Account/reset-password", model);

                if (result.IsSuccessStatusCode)
                {
                    Snackbar.Add("Contraseña restablecida exitosamente", Severity.Success);
                    NavManager.NavigateTo("/");

                }
                else
                {
                    Snackbar.Add("Error al restablecer la contraseña", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("No existe token para restablecer la contraseña", Severity.Error);
            }

        }
    }
}

