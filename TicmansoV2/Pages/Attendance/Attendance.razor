@page "/attendance"
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using TicmansoV2.Shared
@using System.Globalization;
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using MudBlazor

@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

@attribute [Authorize]
<PageTitle>Attendance</PageTitle>
<AuthorizeView>
    <Authorized Context="authContext">
        <MudItem Class="cmptCentrado">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Fichar</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>Fecha: @currentDate.ToString("yyyy-MM-dd")</MudText>
                    <MudText>Hora de entrada: @entryTime.ToString("HH:mm:ss")</MudText>
                    <MudText>Hora de salida: @departureTime?.ToString("HH:mm:ss")</MudText>
                </MudCardContent>
                <MudCardActions>
                    @if (d == 1)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="StartWorkday" Disabled="@IsDisable">Iniciar jornada</MudButton>                    
                    }
                    else if (departureTime == null)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="EndWorkday">Finalizar jornada</MudButton>
                    }
                    else
                    {
                        <MudText Style="background-color:forestgreen; color:aliceblue;">Jornada finalizada.</MudText>
                    }
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudGrid>
            <MudItem xs="12" sm="2">
                <MudDatePicker @bind-Date="date" PickerVariant="PickerVariant.Static" class="cmptCentrado" Rounded="true">
                    <PickerActions>
                        <MudButton Class="mr-auto align-self-start" OnClick="Today">Hoy</MudButton>
                        <MudButton Class="mr-auto align-self-end" OnClick="LoadAttendanceUserData">Comprobar jornada</MudButton>
                    </PickerActions>
                </MudDatePicker>
            </MudItem>
            <MudItem xs="12" sm="10" Class="cmptCentrado">
                        <MudText>
                            Hora de entrada:
                            @if(entryTimeInfo.ToString("HH:mm:ss") == null){@NoData;}
                            else{@entryTimeInfo.ToString("HH:mm:ss");}
                        </MudText>
                        <MudText>
                            Hora de salida: 
                            @if(departureTimeInfo?.ToString("HH:mm:ss") == null){@NoData;}
                            else{@departureTimeInfo?.ToString("HH:mm:ss");}
                        </MudText>               
            </MudItem>           
        </MudGrid>        
    </Authorized>
    <NotAuthorized>
        @{NavManager.NavigateTo("/");}
    </NotAuthorized>
</AuthorizeView>

@code {
    private DateTime currentDate = DateTime.Today;
    private DateTime entryTime;
    private DateTime? departureTime;
    private DateTime entryTimeInfo;
    private DateTime? departureTimeInfo;
    DateTime? date = DateTime.Today;
    MudDatePicker _picker = new ();
    private string userId;
    private AttendanceDTO attendace = new AttendanceDTO();
    private List<AttendanceDTO> usersAtendance = new List<AttendanceDTO>();
    private double entryLatitude;
    private double entryLongitude;
    private double? departureLatitude;
    private double? departureLongitude;
    private int d;
    private double latitude;
    private double longitude;
    private bool IsDisable;
    private string NoData = "No se han encontrado registros";

    protected override async Task OnInitializedAsync()
    {

        await GetUserId();
        await LoadAttendance();
        // await GetLocation();
    }



    private async Task Today()
    {
        await _picker.GoToDate(DateTime.Today);
    }

    private async Task GetUserId()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        var claims = jwtToken.Claims;
        userId = claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
    }

    private async Task LoadAttendanceUserData()
    {
        var response = await HttpClient.GetAsync($"api/Attendances/{date:yyyy-MM-dd}/{userId}");
        if (response.IsSuccessStatusCode)
        {
            var attendanceDto = await response.Content.ReadFromJsonAsync<AttendanceDTO>();

            if (attendanceDto != null)
            {
                entryTimeInfo = attendanceDto.EntryTime;
                departureTimeInfo = attendanceDto.DepartureTime;
            }
        }
        else
        {
            Snackbar.Add("No hay registros para la fecha y el usuario especificados.", Severity.Info);
        }
    }

    private async Task LoadAttendance()
    {
        try
        {
            var response = await HttpClient.GetAsync($"api/Attendances/{currentDate:yyyy-MM-dd}/{userId}");

            if (response.IsSuccessStatusCode)
            {
                var attendanceDto = await response.Content.ReadFromJsonAsync<AttendanceDTO>();

                if (attendanceDto != null)
                {
                    entryTime = attendanceDto.EntryTime;
                    departureTime = attendanceDto.DepartureTime;
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Snackbar.Add("No hay registros para la fecha y el usuario especificados.", Severity.Info);
                d = 1;
            }
            else
            {
                Snackbar.Add("Error al cargar los registros de asistencia.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al procesar la respuesta: {ex.Message}");
            Snackbar.Add("Error al cargar los registros de asistencia.", Severity.Error);
        }
    }

    private async Task StartWorkday()
    {


        var attendance = new AttendanceDTO
        {
            Date = currentDate,
            EntryTime = DateTime.Now,
            UserId = userId,
             // EntryLatitude = latitude,
             // EntryLongitude = longitude
        };

        var response = await HttpClient.PostAsJsonAsync("api/Attendances", attendance);
        if (response.IsSuccessStatusCode)
        {
            entryTime = attendance.EntryTime;
            IsDisable = true;
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            Console.WriteLine("Ya existe un registro de asistencia para la fecha y el usuario especificados.");
        }
        else
        {
            Console.WriteLine("Error al crear el registro de asistencia.");
        }
    }

    private async Task EndWorkday()
    {

        var responseDATE = await HttpClient.GetFromJsonAsync<AttendanceDTO>($"api/Attendances/{currentDate:yyyy-MM-dd}/{userId}");

        if (responseDATE != null)
        {                  
            entryTime = responseDATE.EntryTime;
            departureTime = responseDATE.DepartureTime;                   
        }


        var attendance = new AttendanceDTO
        {
            Date = currentDate,
            EntryTime = entryTime,
            DepartureTime = DateTime.Now,
            UserId = userId,
             // DepartureLatitude = latitude,
             // DepartureLongitude = longitude
        };

        var response = await HttpClient.PutAsJsonAsync($"api/Attendances/{currentDate:yyyy-MM-dd}/{userId}", attendance);
        if (response.IsSuccessStatusCode)
        {
            departureTime = attendance.DepartureTime;
            IsDisable = false;
        }
    }
    // private async Task GetLocation()
    // {
    //     var location = await JSRuntime.InvokeAsync<GeolocationResult>("getLocation");
    //     latitude = location.Coords.Latitude;
    //     longitude = location.Coords.Longitude;
    // }

    // private class GeolocationResult
    // {
    //     public GeolocationCoordinates Coords { get; set; }
    // }

    // private class GeolocationCoordinates
    // {
    //     public double Latitude { get; set; }
    //     public double Longitude { get; set; }
    // }
}