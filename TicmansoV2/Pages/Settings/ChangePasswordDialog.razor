@using System.Net.Http.Json
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt;
@using TicmansoV2.Shared
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization
@using TicmansoV2.Shared.Contracts
@using MudBlazor
@using TicmansoV2.Services

@inject ISnackbar Snackbar
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject IUserAccount AccountRepository

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Cambiar contraseña</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@model" @ref="@form">
            <MudTextField @bind-Value="model.CurrentPassword" Label="Contraseña actual" Variant="Variant.Outlined" InputType="InputType.Password" />
            <MudTextField @bind-Value="model.NewPassword" Label="Nueva contraseña" Variant="Variant.Outlined" InputType="InputType.Password" />
            <MudTextField @bind-Value="ConfirmPassword" Label="Confirmar contraseña" Variant="Variant.Outlined" InputType="InputType.Password" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="Cancel">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit">Cambiar contraseña</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string UserId { get; set; }
    private ChangePasswordDTO model = new ChangePasswordDTO();
    private MudForm form;
    string ConfirmPassword;
    string userId,userEmail;
    private void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {

        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        var claims = jwtToken.Claims;
        try
        {
            userId = claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            userEmail = claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        }
        catch (HttpIOException e)
        {
            Snackbar.Add("No se ha podido cargar la informacion correctamente", Severity.Error);
        }
    }

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            if (model.NewPassword == ConfirmPassword)
            {
                model.Email = userEmail;
                var response = await AccountRepository.ChangePassword(model);

                Snackbar.Add("Contraseña cambiada exitosamente", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Add("Las contraseñas no coinciden", Severity.Error);
            }
        }
    }

}
