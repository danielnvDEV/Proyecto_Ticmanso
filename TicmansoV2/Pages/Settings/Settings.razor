@using System.Net.Http.Json
@using TicmansoV2.Shared
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt;
@using MudBlazor
@inject NavigationManager NavManager
@inject HttpClient httpClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

@attribute [Authorize]


@page "/settings"
<MudGrid>
    <MudItem xs="12" sm="4">
        <MudCard Elevation="25">
            <MudCardContent Class="d-flex flex-column align-items-center">
                @if (imageBytes != null)
                {
                    <MudAvatar Image="@($"data:image/jpeg;base64,{Convert.ToBase64String(imageBytes)}")" Style="height:195px; width:195px;">
                    </MudAvatar>
                }
                else
                {
                    <MudAvatar Image="@selectedImage" Height="190" />
                }

            </MudCardContent>
            <MudCardActions Class="d-flex flex-column align-items-center">
                <MudFileUpload T="IBrowserFile" Accept=".jpg, .jpeg, .png" Class="mt-3" OnFilesChanged="UploadFiles">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" for="@context">
                            Cargar imagen
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
            </MudCardActions>
        </MudCard>
    </MudItem>

    <MudItem xs="12" sm="8">
        <MudForm Model="@user" @ref="@form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudCard Elevation="25" >
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="FirstName" Label="Nombre" Variant="Variant.Outlined" Required="true" RequiredError="El nombre es requerido" Disabled="@(!isEditing)" />
                            <MudTextField @bind-Value="LastName" Label="Apellidos" Variant="Variant.Outlined" Required="true" RequiredError="El apellido es requerido" Class="mt-3" Disabled="@(!isEditing)" />
                            <MudNumericField @bind-Value="Phone" Label="Teléfono" Variant="Variant.Outlined" Class="mt-3"
                                             Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Phone" AdornmentText="+34" MaxLength="9" Min="111111111" Disabled="@(!isEditing)" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="user.Email" Label="Correo electrónico" Variant="Variant.Outlined" Required="true" RequiredError="El correo electrónico es requerido" Disabled="@(!isEditing)" />
                            <MudButton Variant="Variant.Filled" Color="Color.Surface" OnClick="ChangePassword" Class="mt-3" Disabled="@(!isEditing)">Cambiar contraseña</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions Class="pb-4 pl-4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => isEditing = true)" Disabled="@isEditing">Editar</MudButton>
                    @if (isEditing)
                    {
                        <div class="d-flex justify-end">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Guardar cambios</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="@(() => isEditing = false)">Cancelar</MudButton>
                        </div>
                    }
                </MudCardActions>            
            </MudCard>
        </MudForm>
    </MudItem>
</MudGrid>

@code {
    bool isEditing = false;
    private string selectedImage;
    private IBrowserFile file;
    UserImageDTO imageDTO;
    [Parameter]
    public string userId { get; set; }

    ApplicationUserDTO user = new ApplicationUserDTO();
    bool success;
    string[] errors = { };
    MudForm form;
    string FirstName, LastName;
    int? Phone;
    protected override async Task OnInitializedAsync()
    {

        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        var claims = jwtToken.Claims;
        try
        {
            userId = claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;            
        } catch (HttpIOException e)
        {
            Snackbar.Add("No se ha podido cargar la informacion correctamente", Severity.Error);
        }


        await ConsultUserData(userId);


    }

    private async Task ConsultUserData(string userId)
    {
        user = await httpClient.GetFromJsonAsync<ApplicationUserDTO>($"/api/Users/{userId}");

        string[] nameParts = user.Name.Split(' ');
        FirstName = nameParts[0];
        LastName = string.Join(" ", nameParts.Skip(1));

        if (int.TryParse(user.PhoneNumber, out int parsedPhone))
        {
            Phone = parsedPhone;
        }
        else
        {
            Phone = null; 
        }
        try
        {
            imageBytes = await LoadUserImage(user.Id);
        }
        catch (Exception e)
        {
            Console.WriteLine("La imagen se a renderizado correctamente");
        }

    }
    private string imageUrl;
    private byte[] imageBytes;

    private async Task<byte[]> LoadUserImage(string userId)
    {
        var response = await HttpClient.GetAsync($"api/UserImage/GetUserImage/{userId}");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadAsByteArrayAsync();
        }
        return null;
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);


            imageDTO = new UserImageDTO
            {
                FileName = file.Name,
                IdUser = userId,
                Image = buffer
            };

            var response = await httpClient.PutAsJsonAsync($"/api/UserImage", imageDTO);

            await ConsultUserData(userId);
        }   

    }

    private async Task ChangePassword()
    {

    }

    private async Task Submit()
    {
        await form.Validate();

        if (success)
        {
            if (user != null)
            {
                user.Name = $"{FirstName} {LastName}".Trim();
                user.PhoneNumber = Phone?.ToString();

                var response = await httpClient.PutAsJsonAsync($"/api/Users/{userId}", user);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Cambios guardados", Severity.Success);
                    isEditing = false;
                }
                else
                {
                    Snackbar.Add("No se ha podido guardar los cambios", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("El objeto de usuario no está inicializado", Severity.Error);
            }
        }
    }

}
