@page "/management/controlUser"
@using Microsoft.AspNetCore.Identity
@using TicmansoV2.Shared
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using TicmansoV2.Shared.Contracts
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject IUserAccount AccountRepository
@attribute [Authorize]

<AuthorizeView Roles="Admin">
    <Authorized Context="authContext">
        <MudTable Items="@users" Hover="true" Striped="false" Loading="@loading">
            <HeaderContent>
                <MudTh>Nombre</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Telefono</MudTh>
                <MudTh>Rol</MudTh>
                <MudTh>
                    Acciones
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.GroupAdd" Color="@Color.Tertiary" Href="/management/controlUser/createUsers" Style="margin-left:2vh" />
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nombre">@context.Name</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="Telefono">@context.PhoneNumber</MudTd>
                <MudTd DataLabel="Rol">@GetUserRole(context.Id)</MudTd>
                <MudTd DataLabel="Acciones" icon="@Icons.Material.Outlined.GroupAdd" Color="@Color.Tertiary" href="/management/controlUser/createUsers">
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(()=>EditUser(context))">Editar</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@(()=>DeleteUser(context))">Borrar</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
        @if (showEditFields)
        {
            <EditForm Model="@selectedUser" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <MudGrid Justify="Justify.Center" AlignContent="AlignContent.Center" Class="d-flex">

                    <MudItem xs="12" sm="7">
                        <MudCard class="cmptCentrado">
                            <MudCardHeader>
                                <h3>Editar Usuario</h3>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudTextField Label="Nombre" @bind-Value="selectedUser.Name" For="@(() => selectedUser.Name)" Required="true" RequiredError="El nombre es requerido" />
                                <MudTextField Label="Email" @bind-Value="selectedUser.Email" For="@(() => selectedUser.Email)" Required="true" RequiredError="El email es requerido" />
                                <MudSelect Label="Rol" @bind-Value="selectedRole" For="@(() => selectedRole)">
                                    @foreach (var role in roles)
                                    {
                                        <MudSelectItem Value="role"></MudSelectItem>
                                    }
                                </MudSelect>
                                <MudNumericField Label="Teléfono" @bind-Value="selectedUser.PhoneNumber" T="string" MaxLength="9" Validation="@(new Func<string, string>(ValidatePhoneNumber))" />
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Guardar Cambios</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="@CancelEdit">Cancelar</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </EditForm>
        }
    </Authorized>
    <NotAuthorized>
        @{
            NavManager.NavigateTo("/");
        }
    </NotAuthorized>
</AuthorizeView>
@code {
    private List<ApplicationUserDTO> users = new List<ApplicationUserDTO>();
    private bool loading = true;
    private bool showEditFields = false;
    private ApplicationUserDTO selectedUser = new ApplicationUserDTO();
    private List<String> roles = new List<String>();
    private string selectedRole;
    private List<UserWithRoleDTO> userRole = new List<UserWithRoleDTO>();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        await LoadUserRoles();
        await LoadRoles();
    }

    private async Task LoadRoles()
    {
        try
        {
            roles = ["Admin","User"];
        }
        catch (Exception)
        {
            Snackbar.Add("Error al cargar los roles", Severity.Error);
        }

    }

    private async Task LoadUserRoles()
    {
        try
        {
            userRole = await HttpClient.GetFromJsonAsync<List<UserWithRoleDTO>>("/api/Users/users-with-roles");
        }
        catch (Exception)
        {
            Snackbar.Add("Error al cargar rol por usuario", Severity.Error);
        }

    }

    private async Task LoadUsers()
    {
        try
        {
            loading = true;
            users = await HttpClient.GetFromJsonAsync<List<ApplicationUserDTO>>("api/Users");
            loading = false;
        }
        catch (Exception)
        {
            Snackbar.Add("Error cargar los usuarios", Severity.Error);
        }


    }

    private string GetUserRole(string userId)
    {
        var userWithRole = userRole.FirstOrDefault(u => u.UserId == userId);
        return userWithRole?.Role ?? string.Empty;
    }

    private async Task DeleteUser(ApplicationUserDTO user)
    {
        string[] partes = user.Email.Split("@");
        string newEmail = partes[0] + "@" + "UsuarioEliminado.com";
        user.Email = newEmail;
        user.UserName = newEmail;
        try
        {
            var result = await HttpClient.PutAsJsonAsync($"api/Users/{user.Id}", user);

            if (result.IsSuccessStatusCode)
            {
                Snackbar.Add("Usuario actualizado correctamente", Severity.Success);

                // var response = await AccountRepository.ChangePassword("model");


                // if (response.IsSuccessStatusCode)
                // {
                //     Snackbar.Add("Usuario actualizado correctamente", Severity.Success);
                //     await LoadUsers();
                //     await LoadUserRoles();
                // }

            }
            else
            {
                Snackbar.Add("Error al eliminar el usuario", Severity.Error);
                await LoadUsers();
                await LoadUserRoles();
            }
        }
        catch (Exception e)
        {
            Snackbar.Add("Error al eliminar el usuario", Severity.Error);
            await LoadUsers();
            await LoadUserRoles();
        }

    }

    private async Task EditUser(ApplicationUserDTO user)
    {
        selectedUser = user;
        showEditFields = true;

    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var result = await HttpClient.PutAsJsonAsync($"api/Users/{selectedUser.Id}", selectedUser);

            var result2 = await HttpClient.PostAsync($"api/Users/{selectedUser.Id}/roles/{selectedRole}", null);

            if (result.IsSuccessStatusCode)
            {
                Snackbar.Add("Usuario actualizado correctamente", Severity.Success);
                await LoadUsers();
                await LoadUserRoles();
                showEditFields = false;
            }
            else
            {
                Snackbar.Add("Error al actualizar el usuario", Severity.Error);
                await LoadUsers();
                await LoadUserRoles();
            }
            await LoadUsers();
            await LoadUserRoles();
        }
        catch (Exception)
        {
            Snackbar.Add("Ha ocurrido un error", Severity.Info);
        }

    }

    private void CancelEdit()
    {
        showEditFields = false;
    }

    private string ValidatePhoneNumber(string phoneNumber)
    {
        if (string.IsNullOrWhiteSpace(phoneNumber))
            return null;

        if (phoneNumber.Length != 9 || !phoneNumber.All(char.IsDigit))
            return "El número de teléfono debe tener 9 dígitos.";

        return null;
    }
}
