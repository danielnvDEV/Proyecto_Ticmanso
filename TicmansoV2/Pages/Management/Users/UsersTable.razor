@page "/management/controlUser"
@using Microsoft.AspNetCore.Identity
@using TicmansoV2.Shared
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@attribute [Authorize]
<AuthorizeView Roles="Admin">
    <Authorized Context="authContext">
        <MudTable Items="@users" Hover="true" Striped="false" Loading="@loading">
            <HeaderContent>
                <MudTh>Nombre</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Telefono</MudTh>
                <MudTh>Rol</MudTh>
                <MudTh>Acciones
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.GroupAdd" Color="@Color.Tertiary" Href="/management/controlUser/createUsers" Style="margin-left:2vh"/>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nombre">@context.Name</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="Telefono">@context.PhoneNumber</MudTd>
                <MudTd DataLabel="Rol">@GetUserRole(context.Id)</MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(()=>EditUser(context))">Editar</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@(()=>DeleteUser(context))">Borrar</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
        @if (showEditFields)
        {

            

                <EditForm Model="@selectedUser" OnValidSubmit="@HandleValidSubmit" >
                <DataAnnotationsValidator />
                <MudGrid Justify="Justify.Center" AlignContent="AlignContent.Center" Class="d-flex">

                    <MudItem xs="12" sm="7">
                        <MudCard class="cmptCentrado">
                            <MudCardHeader>
                                <h3>Editar Usuario</h3>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudTextField Label="Nombre" @bind-Value="selectedUser.Name" For="@(() => selectedUser.Name)" />
                                <MudTextField Label="Email" @bind-Value="selectedUser.Email" For="@(() => selectedUser.Email)" />
                                <MudSelect Label="Rol" @bind-Value="selectedRole" For="@(() => selectedRole)">
                                    @foreach (var role in roles)
                                    {
                                        <MudSelectItem Value="@role.Name">@role.Name</MudSelectItem>
                                    }
                                </MudSelect>
                                <MudTextField Label="Teléfono" @bind-Value="selectedUser.PhoneNumber" For="@(() => selectedUser.PhoneNumber)" />
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Guardar Cambios</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="@CancelEdit">Cancelar</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </EditForm>

        }

    </Authorized>
    <NotAuthorized>
        @{NavManager.NavigateTo("/");}
    </NotAuthorized>
</AuthorizeView>
@code {
    private List<ApplicationUserDTO> users = new List<ApplicationUserDTO>();
    private bool loading = true;
    private bool showEditFields = false;
    private ApplicationUserDTO selectedUser = new ApplicationUserDTO();
    private List<IdentityRole> roles = new List<IdentityRole>();
    private string selectedRole;
    private List<UserWithRoleDTO> userRole = new List<UserWithRoleDTO>();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        await LoadUserRoles();
        try
        {
            roles = await HttpClient.GetFromJsonAsync<List<IdentityRole>>("api/Roles");
        }
        catch (Exception)
        {

            Console.WriteLine("cositas");
        }

    }

    private async Task LoadUserRoles()
    {
        userRole = await HttpClient.GetFromJsonAsync<List<UserWithRoleDTO>>("/api/Users/users-with-roles");
    }

    private async Task LoadUsers()
    {
        loading = true;
        users = await HttpClient.GetFromJsonAsync<List<ApplicationUserDTO>>("api/Users");        
        loading = false;
    }

    private string GetUserRole(string userId)
    {
        var userWithRole = userRole.FirstOrDefault(u => u.UserId == userId);
        return userWithRole?.Role ?? string.Empty;
    }


    private async Task DeleteUser(ApplicationUserDTO user)
    {
        var result = await HttpClient.DeleteAsync($"api/Users/{user.Id}");
        if (result.IsSuccessStatusCode)
        {
            Snackbar.Add("Usuario eliminado correctamente", Severity.Success);
            await LoadUsers();
        }
        else
        {
            Snackbar.Add("Error al eliminar el usuario", Severity.Error);
        }
    }

    private void EditUser(ApplicationUserDTO user)
    {
        selectedUser = user;
        showEditFields = true;
    }
    private async Task HandleValidSubmit()
    {
        var result = await HttpClient.PutAsJsonAsync($"api/Users/{selectedUser.Id}", selectedUser);

        var result2 = await HttpClient.PostAsync($"api/Users/{selectedUser.Id}/roles/{selectedRole}", null);

        if (result.IsSuccessStatusCode && result2.IsSuccessStatusCode)
        {
            Snackbar.Add("Usuario actualizado correctamente", Severity.Success);
            await LoadUsers();
            await LoadUserRoles();
            showEditFields = false;
        }
        else
        {
            Snackbar.Add("Error al actualizar el usuario", Severity.Error);
            await LoadUserRoles();
        }
    }

    private void CancelEdit()
    {
        showEditFields = false;
    }

}
