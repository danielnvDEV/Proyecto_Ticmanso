@using TicmansoV2.Shared
@using TicmansoV2.Shared.Contracts
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;

@inject IUserAccount AccountRepository
@inject NavigationManager NavManager
@page "/management/controlUser/createUsers"
@attribute [Authorize]
<AuthorizeView Roles="Admin">
    <Authorized Context="authContext">
        <MudCard>
            <MudCardContent>
                <MudTextField @bind-Value="newUser.Name" Label="Nombre" Variant="Variant.Outlined" />
                <MudTextField @bind-Value="newUser.Email" Label="Email" Variant="Variant.Outlined" />
                <MudTextField @bind-Value="password" Label="Contraseña" Variant="Variant.Outlined" InputType="InputType.Password" />
                <MudTextField @bind-Value="confirmPassword" Label="Confirmar Contraseña" Variant="Variant.Outlined" InputType="InputType.Password" />
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateUserAsync">Crear Usuario</MudButton>
            </MudCardActions>
        </MudCard>

        @if (showSuccessMessage)
        {
            <MudAlert Severity="Severity.Success">Usuario creado!</MudAlert>
        }

        @if (showErrorMessage)
        {
            <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
        }
    </Authorized>
    <NotAuthorized>
        @{NavManager.NavigateTo("/");}
    </NotAuthorized>
</AuthorizeView>
@code {
    private ApplicationUserDTO newUser = new ApplicationUserDTO();
    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private bool showSuccessMessage = false;
    private bool showErrorMessage = false;
    private string errorMessage = string.Empty;

    private async Task CreateUserAsync()
    {
        if (password != confirmPassword)
        {
            showErrorMessage = true;
            errorMessage = "Las contraseñas no coinciden";
            return;
        }

        newUser.PasswordHash = password;
        var response = await AccountRepository.CreateAccount(newUser);

        if (response.Flag)
        {
            showSuccessMessage = true;
            showErrorMessage = false;
            newUser = new ApplicationUserDTO();
            password = string.Empty;
            confirmPassword = string.Empty;
        }
        else
        {
            showSuccessMessage = false;
            showErrorMessage = true;
            errorMessage = response.Message;
        }
    }
}