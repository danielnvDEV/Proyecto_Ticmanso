@using TicmansoV2.Shared
@using TicmansoV2.Shared.Contracts
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Text;

@inject HttpClient httpClient
@inject IUserAccount AccountRepository
@inject IEmailSender EmailSender
@inject NavigationManager NavManager

@page "/management/controlUser/createUsers"
@attribute [Authorize]
<AuthorizeView Roles="Admin">
    <Authorized Context="authContext">
        <MudGrid>
            <MudItem xs="12" sm="12">
                <MudCard >
                    <MudCardContent>
                        <MudTextField @bind-Value="newUser.Name" Label="Nombre" Variant="Variant.Outlined" />
                        <MudTextField @bind-Value="newUser.Email" Label="Email" Variant="Variant.Outlined" Validation="@(new EmailAddressAttribute() {ErrorMessage = "El email no tiene un formato valido"})" />
                        <MudTextField @bind-Value="password" Label="Contraseña" Variant="Variant.Outlined" InputType="InputType.Password" />
                        <MudTextField @bind-Value="confirmPassword" Label="Confirmar Contraseña" Variant="Variant.Outlined" InputType="InputType.Password" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateUserAsync">Crear Usuario</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="GeneratePass">Generar contraseña</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>

        @if (showSuccessMessage)
        {
            Snackbar.Add("Usuario creado!", Severity.Success);
        }

        @if (showErrorMessage)
        {            
            Snackbar.Add("Error al crear el usuario!", Severity.Error);
        }
    </Authorized>
    <NotAuthorized>
        @{NavManager.NavigateTo("/");}
    </NotAuthorized>
</AuthorizeView>
@code {
    private ApplicationUserDTO newUser = new ApplicationUserDTO();
    private EmailDTO emailData = new EmailDTO();
    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private bool showSuccessMessage = false;
    private bool showErrorMessage = false;
    private string errorMessage = string.Empty;

    private void GeneratePass()
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_-+=[{]};:<>|./?";
        Random rnd = new Random((int)DateTime.Now.Ticks & 0x0000FFFF);
        StringBuilder sb = new StringBuilder();
                
        sb.Append(chars[rnd.Next(26)]);      
        sb.Append(chars[rnd.Next(26, 52)]);        
        sb.Append(chars[rnd.Next(52, 62)]);        
        sb.Append(chars[rnd.Next(62, chars.Length)]);
        
        for (int i = 0; i < 4; i++)
        {
            sb.Append(chars[rnd.Next(chars.Length)]);
        }

        password = sb.ToString();
        confirmPassword = password;
        StateHasChanged();
    }

    private bool IsValidEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return false;

        try
        {           
            var emailAddressAttribute = new EmailAddressAttribute();
            if (!emailAddressAttribute.IsValid(email))
                return false;

           
            return true;
        }
        catch
        {
            Snackbar.Add("Ha ocurrido un error", Severity.Info);
            return false;
        }
    }


    private async Task CreateUserAsync()
    {
        try
        {
            if (password != confirmPassword)
            {
                Snackbar.Add("Las contraseñas no coinciden", Severity.Warning);
                return;
            }

            if (!IsValidEmail(newUser.Email))
            {
                Snackbar.Add("El email no tiene un formato valido", Severity.Warning);
                return;
            }

            newUser.UserName = newUser.Email;
            newUser.PasswordHash = password;
            var response = await AccountRepository.CreateAccount(newUser);

            if (response.Flag)
            {
                showSuccessMessage = true;
                showErrorMessage = false;

                emailData.ToEmail = newUser.Email;
                emailData.Subject = "Datos de acceso al portal Ticmanso";
                emailData.Body = $"<h1>Bienvenido al portal Ticmanso</h1><p>Estimado {newUser.Name},</p><p>Aquí están tus datos de acceso al portal:</p><ul><li>Email: {newUser.Email}</li><li>Contraseña: {password}</li></ul><a href='https://www.ticmanso.com:7174/'><p>Ir al portal.</p></a>";

                var responser = new HttpResponseMessage();
                try
                {
                    responser = await httpClient.PostAsJsonAsync($"api/Email", emailData);


                    if (responser.IsSuccessStatusCode)
                    {
                        Snackbar.Add("Usuario creado", Severity.Success);
                        Snackbar.Add("Se ha mandado el correo con la información");
                        NavigationManager.NavigateTo("/management/controlUser");

                    }
                    else
                    {
                        Snackbar.Add("Ha ocurrido un error");

                    }

                    newUser = new ApplicationUserDTO();
                    password = string.Empty;
                    confirmPassword = string.Empty;

                }
                catch (Exception)
                {
                    Snackbar.Add("Ha ocurrido un error al enviar el email al usuario");
                }
            }
            else
            {
                showSuccessMessage = false;
                showErrorMessage = true;
                errorMessage = response.Message;
            }
        }
        catch (Exception)
        {
            Snackbar.Add("Ha ocurrido un error al crear al usuario", Severity.Error);
        }
        
    }
    private async Task SendEmail(string email, string subject, string message)
    {
        try
        {
            await EmailSender.SendEmailAsync(email, subject, message);
        }
        catch (Exception)
        {
            Snackbar.Add("Ha ocurrido un error al enviar el email al usuario");
        }
        
    }
}