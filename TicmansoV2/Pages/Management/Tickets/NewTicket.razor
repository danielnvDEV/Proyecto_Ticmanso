@using System.Net.Http.Json
@using TicmansoV2.Shared
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt;
@using MudBlazor
@inject NavigationManager NavManager
@inject HttpClient httpClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

@page "/management/tickets/newTicket"
<PageTitle>New ticket</PageTitle>
<AuthorizeView>
    <Authorized Context="authContext">
        <h1 style="margin-top:2vh">Nuevo ticket</h1>
        <EditForm Model="@ticket" OnValidSubmit="HandleSubmit" class="cmptCentrado">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudCard>
                <MudCardContent>
                    <MudTextField @bind-Value="ticket.Title" Label="Título" Variant="Variant.Outlined" Required="true" MaxLength="100" />
                    <MudTextField @bind-Value="ticket.Description" Label="Descripción" Variant="Variant.Outlined" Required="true" Lines="5" />

                    <MudSelect T="int" Label="Prioridad" Variant="Variant.Outlined" Required="true" @bind-Value="ticket.PriorityId">
                        @foreach (var priority in priorities)
                        {
                            <MudSelectItem Value="@priority.Id">@priority.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Crear ticket</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </Authorized>
    <NotAuthorized>
        @{NavManager.NavigateTo("/");}
    </NotAuthorized>
</AuthorizeView>

@code {
    private TicketDTO ticket = new TicketDTO();
    private List<PriorityDTO> priorities = new List<PriorityDTO>();
    private List<StatusDTO> statuses = new List<StatusDTO>();
    MudForm form;

    string userId;

    protected override async Task OnInitializedAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        var claims = jwtToken.Claims;
        userId = claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        try
        {
            priorities = await httpClient.GetFromJsonAsync<List<PriorityDTO>>("api/Priority");
            statuses = await httpClient.GetFromJsonAsync<List<StatusDTO>>("api/Status");
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"error de conecxión al cargar la información  : {ex.Message}", Severity.Error);
        }
    }


    private async Task HandleSubmit()
    {
       

        ticket.CreationDate = DateTime.Now;
        ticket.CreationUserId = userId;
        ticket.StatusId = 1;

        try
        {
            var response = await httpClient.PostAsJsonAsync("api/Tickets", ticket);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("ticket creado satisfactoriamente!", Severity.Success);

            }
            else
            {
                string errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"no se ha podido crear el ticket: {errorMessage}", Severity.Error);
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"error de conecxión : {ex.Message}", Severity.Error);
        }
    }
}
