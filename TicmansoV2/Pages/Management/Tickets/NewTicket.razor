@using System.Net.Http.Json
@using TicmansoV2.Shared
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt;
@using MudBlazor

@inject HttpClient httpClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

@page "/management/tickets/newTicket"
<PageTitle>New ticket</PageTitle>

<EditForm Model="@ticket" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <MudCard>
        <MudCardContent>
            <MudTextField @bind-Value="ticket.Title" Label="Título" Variant="Variant.Outlined" Required="true" />
            <MudTextField @bind-Value="ticket.Description" Label="Descripción" Variant="Variant.Outlined" Required="true" Lines="5" />

            <MudSelect T="int" Label="Prioridad" Variant="Variant.Outlined" Required="true" @bind-Value="ticket.PriorityId">
                @foreach (var priority in priorities)
                {
                    <MudSelectItem Value="@priority.Id">@priority.Name</MudSelectItem>
                }
            </MudSelect>
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Crear ticket</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>


@code {
    private TicketDTO ticket = new TicketDTO();
    private List<PriorityDTO> priorities = new List<PriorityDTO>();
    private List<StatusDTO> statuses = new List<StatusDTO>();
    MudForm form;

    string userId;

    protected override async Task OnInitializedAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        var claims = jwtToken.Claims;
        userId = claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;


        priorities = await httpClient.GetFromJsonAsync<List<PriorityDTO>>("https://localhost:7291/api/Priority");
        statuses = await httpClient.GetFromJsonAsync<List<StatusDTO>>("https://localhost:7291/api/Status");
    }


    private async Task HandleSubmit()
    {
       

        ticket.CreationDate = DateTime.Now;
        ticket.CreationUserId = userId;
        ticket.StatusId = 1;

        try
        {
            var response = await httpClient.PostAsJsonAsync("https://localhost:7291/api/Tickets", ticket);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("ticket create successfully!", Severity.Success);

            }
            else
            {
                string errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"create failed: {errorMessage}", Severity.Error);
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error contacting the server: {ex.Message}", Severity.Error);
        }
    }
}
