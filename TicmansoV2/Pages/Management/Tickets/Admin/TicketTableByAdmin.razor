@using System.Net.Http.Json
@using TicmansoV2.Shared
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt;
@using MudBlazor
@using TicmansoV2.Shared.Views;

@inject NavigationManager NavManager
@inject HttpClient httpClient

<MudGrid>
    <MudItem xs="9">
        <MudTable Items="@ticket" T="GeneralViewTicketDTO" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped"
          Filter="new Func<GeneralViewTicketDTO,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1" OnRowClick="@OnRowClick">
            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium" Class="mt-0">
                </MudTextField>
            </ToolBarContent>

            <HeaderContent>
                <MudTh>Ticket</MudTh>
                <MudTh>Titulo</MudTh>
                <MudTh>Descripción</MudTh>
                <MudTh>Usuario</MudTh>
                <MudTh>Agente</MudTh>
                <MudTh>Prioridad</MudTh>
                <MudTh>Estado</MudTh>
            </HeaderContent>           
            <RowTemplate>
                <MudTd DataLabel="Titulo">@context.NumTicket</MudTd>
                <MudTd DataLabel="Titulo">@context.Tittle</MudTd>
                <MudTd DataLabel="Descripción">
                    @if (context.Description.Length > 40)
                    {
                        @($"{context.Description.Substring(0, 40)}...")
                    }
                    else
                    {
                        @context.Description
                    }
                </MudTd>
                <MudTd DataLabel="Usuario">@context.CreationUser</MudTd>
                <MudTd DataLabel="Agente">@context.SuportUser</MudTd>
                <MudTd DataLabel="Prioridad">@context.Priority</MudTd>
                <MudTd DataLabel="Estado">@context.Status</MudTd>                
            </RowTemplate>
            <PagerContent>
                <MudTablePager AllItemsText="Cosa"/>
            </PagerContent>
        </MudTable>
    </MudItem>
    <MudItem xs="3">
        <MudCard>
            <MudCardHeader Style="background-color: #e0e0e0;">
                <CardHeaderContent>
                    <MudText Typo="Typo.h6" Style="color: #333;">Filtros</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText><b>Estado</b></MudText>
                <MudSelect T="string" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" @bind-Value="filterCriteria.Status">
                    <MudSelectItem Value="@((string)null)"></MudSelectItem>
                    @foreach (var status in Statuses)
                    {
                        <MudSelectItem Value="@status.Name" />
                    }
                </MudSelect>

                <MudText><b>Prioridad</b></MudText>
                <MudSelect T="string" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" @bind-Value="filterCriteria.Priority">
                    <MudSelectItem Value="@((string)null)"></MudSelectItem>
                    @foreach (var priority in Priorities)
                    {
                        <MudSelectItem Value="@priority.Name" />
                    }
                </MudSelect>
                <MudText><b>Usuario</b></MudText>
                <MudSelect T="string" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" @bind-Value="filterCriteria.CreationUser">
                    <MudSelectItem Value="@((string)null)"></MudSelectItem>
                    @foreach (var user in User)
                    {
                        <MudSelectItem Value="@user.Name" />
                    }
                </MudSelect>
                <MudText><b>Agente</b></MudText>
                <MudSelect T="string" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" @bind-Value="filterCriteria.SuportUser">
                    <MudSelectItem Value="@((string)null)"></MudSelectItem>
                    @foreach (var user in User)
                    {
                        <MudSelectItem Value="@user.Name" />
                    }
                </MudSelect>
            </MudCardContent>
            <MudCardActions>
                @*<MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="ApplyFilters">Aplicar</MudButton>
                *@
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private ApplicationUserDTO selectedSuportUser;
    private List<ApplicationUserDTO> User { get; set; } = new List<ApplicationUserDTO>();
    private GeneralViewTicketDTO selectedItem1 = null;
    private HashSet<GeneralViewTicketDTO> selectedItems = new HashSet<GeneralViewTicketDTO>();
    private List<PriorityDTO> Priorities { get; set; } = new List<PriorityDTO>();
    private List<StatusDTO> Statuses { get; set; } = new List<StatusDTO>();
    private IEnumerable<GeneralViewTicketDTO> ticket = new List<GeneralViewTicketDTO>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ticket = await httpClient.GetFromJsonAsync<List<GeneralViewTicketDTO>>("api/GeneralTikets");
            Statuses = await httpClient.GetFromJsonAsync<List<StatusDTO>>("api/Status");
            Priorities = await httpClient.GetFromJsonAsync<List<PriorityDTO>>("api/Priority");
            User = await httpClient.GetFromJsonAsync<List<ApplicationUserDTO>>("api/Users");
        }
        catch (Exception)
        {
            Snackbar.Add("Ha ocurrido un error al obtener los datos");
        }


    }



    private bool FilterFunc1(GeneralViewTicketDTO element) =>
     (string.IsNullOrWhiteSpace(filterCriteria.Status) || element.Status == filterCriteria.Status) &&
     (string.IsNullOrWhiteSpace(filterCriteria.Priority) || element.Priority == filterCriteria.Priority) &&
     (string.IsNullOrWhiteSpace(searchString1) ||
         element.NumTicket.ToString().Contains(searchString1, StringComparison.OrdinalIgnoreCase) ||
         element.Tittle?.Contains(searchString1, StringComparison.OrdinalIgnoreCase) == true ||
         element.Description?.Contains(searchString1, StringComparison.OrdinalIgnoreCase) == true ||
         element.CreationUser?.Contains(searchString1, StringComparison.OrdinalIgnoreCase) == true ||
         element.SuportUser?.Contains(searchString1, StringComparison.OrdinalIgnoreCase) == true);




    private GeneralViewTicketDTO filterCriteria = new GeneralViewTicketDTO();

    [Parameter] public EventCallback<GeneralViewTicketDTO> OnFilterChanged { get; set; }

    async Task ApplyFilters()
    {
        await OnFilterChanged.InvokeAsync(filterCriteria);
    }
    [Parameter]
    public EventCallback<int> OnTicketSelected { get; set; }

    private void ShowTicketDetails(int ticketId)
    {
        OnTicketSelected.InvokeAsync(ticketId);
    }

    private long selectedTicketId;

    private void OnRowClick(TableRowClickEventArgs<GeneralViewTicketDTO> args)
    {
        var clickedTicket = args.Item;
        HandleTicketSelected(clickedTicket.NumTicket);
    }

    private void HandleTicketSelected(int ticketId)
    {
        selectedTicketId = ticketId;
        NavManager.NavigateTo($"/tickets/ticket/{ticketId}");
    }
}
