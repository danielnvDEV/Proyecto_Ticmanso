@* @using System.Net.Http.Json
@using TicmansoV2.Shared
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt;
@using MudBlazor



@inject NavigationManager NavigationManager
@inject HttpClient httpClient

@page "/tickets"
<PageTitle>Tickets</PageTitle>
    <MudGrid>
        <MudItem xs="9" > 
            <MudTable Items="@ticket" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" 
                         Filter="new Func<GeneralViewTicketDTO,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
                <ToolBarContent>
                        <MudText Typo="Typo.h6">Tickets</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
                            IconSize="Size.Medium" Class="mt-0">
                        </MudTextField>
                </ToolBarContent>

                <HeaderContent>
                        <MudTh>NumTicket</MudTh>
                        <MudTh>Titulo</MudTh>
                        <MudTh>Descripcion</MudTh>
                        <MudTh>Usuario</MudTh>        
                        <MudTh>Agente</MudTh>
                        <MudTh>Prioridad</MudTh>
                        <MudTh>Estado</MudTh>
                </HeaderContent>
                <RowTemplate>
                <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="@(() => HandleTicketSelected(@context.NumTicket))">
                    @context.NumTicket
                </MudButton>
                        <MudTd DataLabel="Titulo">@context.Tittle</MudTd>
                        <MudTd DataLabel="Descripcion">@context.Description</MudTd>
                        <MudTd DataLabel="Usuario">@context.CreationUser</MudTd>
                        <MudTd DataLabel="Agente">@context.SuportUser</MudTd>
                        <MudTd DataLabel="Prioridad">@context.Priority</MudTd>
                        <MudTd DataLabel="Estado">@context.Status</MudTd>
                </RowTemplate>
                <PagerContent>
                        <MudTablePager/>
                    </PagerContent>
                </MudTable>
        </MudItem>

    </MudGrid>
@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private ApplicationUserDTO selectedSuportUser;
    private List<ApplicationUserDTO> User { get; set; } = new List<ApplicationUserDTO>();
    private GeneralViewTicketDTO selectedItem1 = null;
    private HashSet<GeneralViewTicketDTO> selectedItems = new HashSet<GeneralViewTicketDTO>();

    private IEnumerable<GeneralViewTicketDTO> ticket = new List<GeneralViewTicketDTO>();

    protected override async Task OnInitializedAsync()
    {
        ticket = await httpClient.GetFromJsonAsync<List<GeneralViewTicketDTO>>("https://localhost:7144/api/Ticmanso/generalviewticket");

        User = await httpClient.GetFromJsonAsync<List<ApplicationUserDTO>>("https://localhost:7144/api/Ticmanso/users");

    }



    private bool FilterFunc1(GeneralViewTicketDTO element) =>
        string.IsNullOrWhiteSpace(searchString1) ||
        element.NumTicket.ToString().Contains(searchString1, StringComparison.OrdinalIgnoreCase) == true ||
        element.Tittle?.Contains(searchString1, StringComparison.OrdinalIgnoreCase) == true ||
        element.Description?.Contains(searchString1, StringComparison.OrdinalIgnoreCase) == true ||
        element.CreationUser?.Contains(searchString1, StringComparison.OrdinalIgnoreCase) == true ||
        element.SuportUser?.Contains(searchString1, StringComparison.OrdinalIgnoreCase) == true ||
        element.Priority?.Contains(searchString1, StringComparison.OrdinalIgnoreCase) == true ||
        element.Status?.Contains(searchString1, StringComparison.OrdinalIgnoreCase) == true;



    private GeneralViewTicketDTO filterCriteria = new GeneralViewTicketDTO();

    [Parameter] public EventCallback<GeneralViewTicketDTO> OnFilterChanged { get; set; }

    async Task ApplyFilters()
    {
        await OnFilterChanged.InvokeAsync(filterCriteria);
    }
    [Parameter] 
    public EventCallback<int> OnTicketSelected { get; set; }

    private void ShowTicketDetails(int ticketId)
    {
        OnTicketSelected.InvokeAsync(ticketId);
    }

    private long selectedTicketId;

    private void HandleTicketSelected(int ticketId)
    {
        selectedTicketId = ticketId;
        NavigationManager.NavigateTo($"/tickets/ticket/{ticketId}");
    }
} *@