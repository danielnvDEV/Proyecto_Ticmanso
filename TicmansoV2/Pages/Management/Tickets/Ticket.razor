@using System.Net.Http.Json
@using TicmansoV2.Shared
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt;
@using MudBlazor

@inject HttpClient httpClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@page "/tickets/ticket/{ticketId:int}"
<PageTitle>Ticket</PageTitle>
<AuthorizeView>
    <Authorized Context="authContext">
        @if (ticket != null)
        {
        <MudGrid>
            <MudItem xs="9" > 
                <MudCard Style="background-color: #f5f5f5;" xs="9">
                    <MudCardHeader Style="background-color: #e0e0e0;">
                        <CardHeaderContent> 
                            <MudGrid> 
                                <MudItem xs="6"> 
                                    <MudText Typo="Typo.h6">@ticket.Title</MudText> 
                                </MudItem>
                                <MudItem xs="6" Class="d-flex justify-end"> 
                                    <MudText Typo="Typo.h6" Style="color: #333;">#@ticket.Id</MudText> 
                                </MudItem> 
                            </MudGrid> 
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText>
                            Creado por: @CreationUserName.Name
                        </MudText>
                        <br>
                        <MudText><b>Descripción:</b><br>
                            @ticket.Description
                        </MudText>
                               
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary">Responder</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
             <MudItem xs="3">
                <MudCard>
                    <MudCardHeader Style="background-color: #e0e0e0;">
                        <CardHeaderContent>
                                <MudText Typo="Typo.h6" Style="color: #333;">Informacion</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                            <MudText><b>PROPIEDADES</b></MudText>
                            <MudText><b>Tipo</b>
                                <MudSelect T="string" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                                    <MudSelectItem Value="@("Cappuccino")" />
                                    <MudSelectItem Value="@("Cafe Latte")" />
                                    <MudSelectItem Value="@("Espresso")" />
                                </MudSelect>
                            </MudText>
                            <MudText><b>Estado</b>
                                <MudSelect T="string" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" @bind-Value="selectedStatus">
                                    @foreach (var status in Statuses)
                                    {
                                        <MudSelectItem Value="@status.Name" />
                                    }
                                </MudSelect>
                            </MudText>
                            <MudText><b>Prioridad</b>
                                <MudSelect T="string" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" @bind-Value="selectedPriority">
                                    @foreach (var priority in Priorities)
                                    {
                                        <MudSelectItem Value="@priority.Name" />
                                    }
                                </MudSelect>
                            </MudText>
                            <MudText><b>Agente</b>
                                <MudSelect T="ApplicationUserDTO" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" @bind-Value="selectedAgent">
                                    @foreach (var u in User)
                                    {
                                        <MudSelectItem Value="@u">@u.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudText>
                    </MudCardContent>
                    <MudCardActions>
                            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="UpdateTicketAsync">Actualizar</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
        }
        else
        {
            <p>Loading ticket details...</p>
        }
    </Authorized>
    <NotAuthorized>
        @{NavManager.NavigateTo("/");}
    </NotAuthorized>
</AuthorizeView>
@code {
    [Parameter]
    public int ticketId { get; set; }

    private string selectedPriority;
    private string selectedStatus;
    
    private ApplicationUserDTO selectedAgent;
    private ApplicationUserDTO CreationUserName;

    private string selectedAgentName;
    private TicketDTO ticket = new TicketDTO();

    private List<PriorityDTO> Priorities { get; set; } = new List<PriorityDTO>();
    private List<StatusDTO> Statuses { get; set; } = new List<StatusDTO>();
    private List<ApplicationUserDTO> User { get; set; } = new List<ApplicationUserDTO>();


    protected override async Task OnInitializedAsync()
    {
        ticket = await httpClient.GetFromJsonAsync<TicketDTO>($"https://localhost:7291/api/Tickets/{ticketId}");

        Statuses = await httpClient.GetFromJsonAsync<List<StatusDTO>>("https://localhost:7291/api/Status");

        Priorities = await httpClient.GetFromJsonAsync<List<PriorityDTO>>("https://localhost:7291/api/Priority");

        User = await httpClient.GetFromJsonAsync<List<ApplicationUserDTO>>("https://localhost:7291/api/Users");

        

        if (ticket != null)
        {
            CreationUserName = await httpClient.GetFromJsonAsync<ApplicationUserDTO>($"https://localhost:7291/api/Users/{ticket.CreationUserId}");

            var priority = await httpClient.GetFromJsonAsync<PriorityDTO>($"https://localhost:7291/api/Priority/{ticket.PriorityId}");

            var status = await httpClient.GetFromJsonAsync<StatusDTO>($"https://localhost:7291/api/Status/{ticket.StatusId}");

            if (ticket.SupportUserId != null)
            {
                var user = await httpClient.GetFromJsonAsync<ApplicationUserDTO>($"https://localhost:7291/api/Users/{ticket.SupportUserId}");
                if (user != null)
                {
                    selectedAgent = user;
                    selectedAgentName = user.Name; 
                }
            }

            if (priority != null && status != null)
            {
                selectedPriority = priority.Name;
                selectedStatus = status.Name;

            }
        }

    }

    private async Task UpdateTicketAsync()
    {

        var currentDateTime = DateTime.Now;

        ticket.ChangedDate = currentDateTime;
        ticket.StatusId = Statuses.FirstOrDefault(s => s.Name == selectedStatus)?.Id ?? ticket.StatusId;
        ticket.PriorityId = Priorities.FirstOrDefault(p => p.Name == selectedPriority)?.Id ?? ticket.PriorityId;
        ticket.SupportUserId = selectedAgent?.Id;

        var response = await httpClient.PutAsJsonAsync($"https://localhost:7291/api/Tickets/{ticketId}", ticket);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Ticket actualizado correctamente.", Severity.Success);
        }
        else
        {
            string errorMessage = await response.Content.ReadAsStringAsync();
            Snackbar.Add($"Error al actualizar el ticket: {errorMessage}", Severity.Error);
        }
    }
}