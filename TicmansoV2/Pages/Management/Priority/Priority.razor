@using System.Net.Http.Json
@using TicmansoV2.Shared
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using MudBlazor
@using MudBlazor.Utilities


@page "/management/priorities"
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@attribute [Authorize]
<PageTitle>Administrar prioridad</PageTitle>
<AuthorizeView>
    <Authorized Context="authContext">
        <MudTable Items="@priorities" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Info">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Prioridades</MudText>
                <MudSpacer />
                <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenCreateForm">Crear Prioridad</MudButton>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Nombre</MudTh>
                <MudTh>Color</MudTh>
                <MudTh>Acciones</MudTh>
            </HeaderContent>
            <RowTemplate Context="priorityContext">
                <MudTd DataLabel="Id">@priorityContext.Id</MudTd>
                <MudTd DataLabel="Nombre">@priorityContext.Name</MudTd>
                <MudTd DataLabel="Color">
                    <MudChip Style="@($"Background-Color:{priorityContext.Color}")" />
                </MudTd>
                <MudTd DataLabel="Acciones">
                    <MudButton Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" OnClick="@(() => OpenEditForm(priorityContext.Id))">Editar</MudButton>
                    <MudButton Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" OnClick="@(() => DeletePriority(priorityContext.Id))">Borrar</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>

        <MudDialog @bind-IsVisible="showForm">
            <TitleContent>
                <MudText Typo="Typo.h6">@(editingPriorityId == 0 ? "Crear Prioridad" : "Editar Prioridad")</MudText>
            </TitleContent>
            <DialogContent>
                <MudForm Model="@priority" @ref="form">
                    <MudTextField @bind-Value="priority.Name" Label="Nombre" Required="true" RequiredError="El nombre es requerido"/>
                    <MudColorPicker @bind-Value="selectedColor" Label="Selecciona color" ColorPickerView="ColorPickerView.Spectrum" />
                </MudForm>
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="CloseForm">Cancelar</MudButton>
                <MudButton Color="Color.Primary" OnClick="SavePriority">Guardar</MudButton>
            </DialogActions>
        </MudDialog>
    </Authorized>
    <NotAuthorized>
       @{NavManager.NavigateTo("/");}
    </NotAuthorized>
</AuthorizeView>
@code {
    private List<PriorityDTO> priorities = new List<PriorityDTO>();
    private PriorityDTO priority = new PriorityDTO();
    private bool loading = true;
    private bool showForm = false;
    private int editingPriorityId = 0;
    private MudForm form;
    private MudColor selectedColor;


    protected override async Task OnInitializedAsync()
    {
        await LoadPriorities();
    }

    private async Task LoadPriorities()
    {
        try
        {
            loading = true;
            priorities = await HttpClient.GetFromJsonAsync<List<PriorityDTO>>("api/Priority");
            loading = false;
        }
        catch (Exception)
        {
            Snackbar.Add("Ha ocurrido un error", Severity.Info);
        }

    }

    private void OpenCreateForm()
    {
        priority = new PriorityDTO();
        editingPriorityId = 0;
        showForm = true;
    }

    private async Task OpenEditForm(int id)
    {
        try
        {
            priority = await HttpClient.GetFromJsonAsync<PriorityDTO>($"api/Priority/{id}");
            editingPriorityId = id;
            showForm = true;
        }
        catch (Exception)
        {
            Snackbar.Add("Ha ocurrido un error", Severity.Info);
        }

    }


    private void CloseForm()
    {
        showForm = false;
    }

    private async Task SavePriority()
    {
        try
        {
            if (editingPriorityId == 0)
            {
                priority.Color = selectedColor.ToString();
                await HttpClient.PostAsJsonAsync("api/Priority", priority);
                Snackbar.Add("Priority creado", Severity.Success);
            }
            else
            {
                priority.Color = selectedColor.Value.ToString();
                await HttpClient.PutAsJsonAsync($"api/Priority/{editingPriorityId}", priority);
                Snackbar.Add("Priority actualizado", Severity.Info);
            }

            showForm = false;
            await LoadPriorities();
        }
        catch (Exception)
        {
            Snackbar.Add("Ha ocurrido un error", Severity.Info);
        }

    }

    private async Task DeletePriority(long id)
    {

        try
        {
            await HttpClient.DeleteAsync($"api/Priority/{id}");
            Snackbar.Add("Priority eliminado", Severity.Warning);
            await LoadPriorities();
        }
        catch (Exception)
        {
            Snackbar.Add("Ha ocurrido un error", Severity.Info);
        }

    }
    private void UpdateColor(MudColor color)
    {
        selectedColor = color;
    }
}
