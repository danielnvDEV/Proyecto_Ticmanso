@using System.Net.Http.Json
@using TicmansoV2.Shared
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt;
@using MudBlazor
@inject NavigationManager NavManager
@inject HttpClient httpClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

@attribute [Authorize]


@page "/settings"

<AuthorizeView>
    <Authorized>
        <MudCard>
            <MudCardHeader>
                Ajustes de usuario
            </MudCardHeader>
            <MudCardContent>
                Nombre:<br />
                Apellidos<br />
                Email<br />
                Telefono<br />
                Contraseña
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Color="Color.Primary">Editar</MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Primary">Guardar</MudButton>
            </MudCardActions>
        </MudCard>
    </Authorized>
</AuthorizeView>
@code {
    private string userId;
    ApplicationUserDTO user = new ApplicationUserDTO();
    protected override async Task OnInitializedAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        var claims = jwtToken.Claims;
        userId = claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        await consultUserData(userId);
    }

    private async Task consultUserData(string userId)
    {
        user = await httpClient.GetFromJsonAsync<ApplicationUserDTO>("/api/Users/{userId}");
    }
}
