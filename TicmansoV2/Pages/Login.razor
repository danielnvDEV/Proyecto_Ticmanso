@page "/"
@layout LoginLayout

@using Microsoft.AspNetCore.Components.Authorization
@using TicmansoV2.Authentication
@using TicmansoV2.Shared.Contracts
@using MudBlazor
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt

@inject IUserAccount AccountService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager

<PageTitle>Login</PageTitle>

<MudContainer>
    <MudGrid Justify="Justify.Center" AlignContent="AlignContent.Center" Class="loginGrid d-flex">
        <MudItem xs="12" sm="6">
            <EditForm Enhance Model="User" OnValidSubmit="HandleLogin" Class="LoginItem">
                <DataAnnotationsValidator />
                <MudCard Square="false" Class="LoginCard rounded-lg"
                         Style="box-shadow: 0 4px 6px rgba(100, 147, 181, 1), 0 1px 3px rgba(100, 147, 181, 0.5);">
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">Login</MudText>
                        <MudImage Src="images/logo.png" Class="loginLogo"></MudImage>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTextField @bind-Value="User.Email"
                                      Label="Email Address"
                                      Variant="Variant.Outlined"
                                      Class="mb-3" />

                        <MudTextField @bind-Value="User.Password"
                                      Label="Password"
                                      Variant="Variant.Outlined"
                                      InputType="InputType.Password" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Entrar</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    public LoginDTO User { get; set; } = new();
    
    string userId;

    protected override async Task OnInitializedAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        if (!string.IsNullOrEmpty(token))
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            var claims = jwtToken.Claims;

            userId = claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

            NavigationManager.NavigateTo("/dashboard");

        }
    }
    async Task HandleLogin()
    {
        var (flag, token, message) = await AccountService.LoginAccount(User);
        if (flag)
        {
            string customMessage = $"{message}{Environment.NewLine}{token}";
            await JSRuntime.InvokeVoidAsync("alert", customMessage);
            User = new();

            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(token);
            NavManager.NavigateTo("/dashboard", forceLoad: true);
        }

        await JSRuntime.InvokeVoidAsync("alert", message);
        return;
    }
}
