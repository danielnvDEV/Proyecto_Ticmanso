// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicmansoWebAPI.Model;

#nullable disable

namespace TicmansoWebAPI.Migrations.TicmansoDev
{
    [DbContext(typeof(TicmansoDevContext))]
    [Migration("20240409122004_timanso")]
    partial class timanso
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("TicmansoWebAPI.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AspNetUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_id");

                    b.Property<string>("User1Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user1_id");

                    b.Property<string>("User2Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user2_id");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("User2Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.HasIndex("User1Id", "User2Id")
                        .IsUnique();

                    b.ToTable("chat", (string)null);
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("TRIAL");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address")
                        .HasComment("TRIAL");

                    b.Property<string>("Cif")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("cif")
                        .HasComment("TRIAL");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city")
                        .HasComment("TRIAL");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country")
                        .HasComment("TRIAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasComment("TRIAL");

                    b.Property<long>("PostalCode")
                        .HasColumnType("bigint")
                        .HasColumnName("postalCode")
                        .HasComment("TRIAL");

                    b.HasKey("Id")
                        .HasName("pk_company");

                    b.ToTable("company", null, t =>
                        {
                            t.HasComment("TRIAL");
                        });
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int")
                        .HasColumnName("chat_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("sender_id");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.Priority", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("TRIAL");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_priority");

                    b.ToTable("priority", null, t =>
                        {
                            t.HasComment("TRIAL");
                        });
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.Signing", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("AspNetUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("departure_time");

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("entry_time");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Date")
                        .HasName("pk_signing");

                    b.HasIndex("AspNetUserId");

                    b.HasIndex(new[] { "UserId" }, "idx_user_id");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "UserId" }, "idx_user_id"), 99);

                    b.ToTable("Signings");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_status");

                    b.ToTable("status", null, t =>
                        {
                            t.HasComment("TRIAL");
                        });
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AspNetUserCreationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("creation_user_id");

                    b.Property<string>("AspNetUserSupportId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Support_user_id");

                    b.Property<DateTime?>("ChangedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("changed_date");

                    b.Property<int?>("ChatId")
                        .HasColumnType("int")
                        .HasColumnName("chat_id");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("close_date");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("PriorityId")
                        .HasColumnType("bigint")
                        .HasColumnName("priority_id");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_ticket");

                    b.HasIndex(new[] { "AspNetUserSupportId" }, "IX_ticket_Support_user_id");

                    b.HasIndex(new[] { "ChatId" }, "IX_ticket_chat_id");

                    b.HasIndex(new[] { "AspNetUserCreationId" }, "IX_ticket_creation_user_id");

                    b.HasIndex(new[] { "PriorityId" }, "IX_ticket_priority_id");

                    b.HasIndex(new[] { "StatusId" }, "IX_ticket_status_id");

                    b.ToTable("ticket", null, t =>
                        {
                            t.HasComment("TRIAL");
                        });
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.User", b =>
                {
                    b.HasBaseType("TicmansoWebAPI.Model.AspNetUser");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Surnames")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("surnames");

                    b.HasIndex(new[] { "CompanyId" }, "fk_user_company1_idx");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CompanyId" }, "fk_user_company1_idx"), 99);

                    b.HasIndex(new[] { "RoleId" }, "fk_user_role1_idx");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RoleId" }, "fk_user_role1_idx"), 99);

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("TicmansoWebAPI.Model.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicmansoWebAPI.Model.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.AspNetRoleClaim", b =>
                {
                    b.HasOne("TicmansoWebAPI.Model.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.AspNetUserClaim", b =>
                {
                    b.HasOne("TicmansoWebAPI.Model.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.AspNetUserLogin", b =>
                {
                    b.HasOne("TicmansoWebAPI.Model.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.AspNetUserToken", b =>
                {
                    b.HasOne("TicmansoWebAPI.Model.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.Chat", b =>
                {
                    b.HasOne("TicmansoWebAPI.Identity.ApplicationUser", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicmansoWebAPI.Identity.ApplicationUser", "User2")
                        .WithMany()
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicmansoWebAPI.Model.User", null)
                        .WithMany("ChatUserId1Navigations")
                        .HasForeignKey("UserId");

                    b.HasOne("TicmansoWebAPI.Model.User", null)
                        .WithMany("ChatUsers")
                        .HasForeignKey("UserId1");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.Message", b =>
                {
                    b.HasOne("TicmansoWebAPI.Model.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicmansoWebAPI.Identity.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.Signing", b =>
                {
                    b.HasOne("TicmansoWebAPI.Model.User", "User")
                        .WithMany("Signings")
                        .HasForeignKey("AspNetUserId")
                        .IsRequired()
                        .HasConstraintName("signing_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.Ticket", b =>
                {
                    b.HasOne("TicmansoWebAPI.Model.User", "CreationUser")
                        .WithMany("TicketCreationUsers")
                        .HasForeignKey("AspNetUserCreationId")
                        .IsRequired()
                        .HasConstraintName("fk_ticket_user1");

                    b.HasOne("TicmansoWebAPI.Model.User", "SupportUser")
                        .WithMany("TicketSupportUsers")
                        .HasForeignKey("AspNetUserSupportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_user2");

                    b.HasOne("TicmansoWebAPI.Model.Chat", "Chat")
                        .WithMany("Tickets")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TicmansoWebAPI.Model.Priority", "Priority")
                        .WithMany("Tickets")
                        .HasForeignKey("PriorityId")
                        .IsRequired()
                        .HasConstraintName("fk_ticket_priority1");

                    b.HasOne("TicmansoWebAPI.Model.Status", "Status")
                        .WithMany("Tickets")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("fk_ticket_status1");

                    b.Navigation("Chat");

                    b.Navigation("CreationUser");

                    b.Navigation("Priority");

                    b.Navigation("Status");

                    b.Navigation("SupportUser");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.User", b =>
                {
                    b.HasOne("TicmansoWebAPI.Model.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_user_company1");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.Company", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.Priority", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.Status", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicmansoWebAPI.Model.User", b =>
                {
                    b.Navigation("ChatUserId1Navigations");

                    b.Navigation("ChatUsers");

                    b.Navigation("Signings");

                    b.Navigation("TicketCreationUsers");

                    b.Navigation("TicketSupportUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
